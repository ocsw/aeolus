####################################################
# configuration file for Aeolus, by Daniel Malament
# run 'aeolus license' for license info
####################################################


###############
# housekeeping
###############

#
# search path for executables
# (see usage notes on portability)
#
# typical safe value:
# usepath="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
#
# * can be blank or unset, for the system default
#
###usepath=

#
# umask value
#
# generally 077 (more secure, but less accessible), or 022 (more accessible,
# but less secure; not necessarily a good idea); 077 is strongly recommended
#
# * can be blank or unset, for the system default
#
###useumask=

#
# in order to use a non-0 runevery or ifrunning (see below), your system
# must support one of:
#   "find":       find . -mmin +N
#   "date-r":     date -r fileref +%s
#   "date-d":     date -d "N minutes ago" "+%Y%m%d%H%M.%S"
#   "awk"/"gawk": awk/gawk with strftime() and systime()
#
# "date-d", "awk", and "gawk" also require touch -t timestamp and
# find . -newer fileref, but those should usually be available
#
# note that the rounding behavior of the various options may differ;
# "date-d", "awk", and "gawk" should be accurate to within one second, but
# the other options may have up to a 59-second lag
#
# * must have a value, but is currently only used if runevery is not 0
#   and/or ifrunning is not 0
# * if blank or unset, defaults to "find"
#
###timecomptype=

#
# debug the script ("yes" or "no")?
#
# currently, turns on shell tracing (set -vx)
#
# * if blank or unset, defaults to "no"
#
###debugme=

#
# how to handle various errors
#
# possible options include:
#   "ignore" = silently ignore the error and continue (not recommended)
#   "warn" = send/log a warning, but continue
#   "db" = warn and skip to the next DB
#   "phase" = warn and skip to the next phase of the backup
#             (i.e., the next DBMS or rsync)
#   "exit" = exit the script with an error
# (abbreviated below, but the full names must be used in the settings)
#
# error       | explanation
# ------------------------------------------------------
#   tunerr    | error opening SSH tunnel
#   dbreplerr | error getting DBMS replication status
#   dblisterr | error getting DB list
#   dbnameerr | DB name contains a problematic character
#   dbduplerr | DB dumpfile already exists
#   dbdumperr | error dumping DB
#   dbziperr  | error compressing DB dump
#
# error       | allowed vals   | default
# --------------------------------------
#   tunerr    |          ph ex | "phase"
#   dbreplerr |          ph ex | "phase"
#   dblisterr |          ph ex | "phase"
#   dbnameerr |       db ph ex | "db"
#   dbduplerr | ig wa db ph ex | "db"
#   dbdumperr |       db ph ex | "db"
#   dbziperr  |       db ph ex | "db"
#
# note:
#   -= tunerr applies to all tunnels, including for rsync
#   -= dbreplerr is also used if the [dbms]_replstatus check fails
#   -= dbnameerr does not apply if [dbms]_splitdbs=no; see the usage notes
#      for more information
#   -= dbduplerr does not apply in single/singledir modes (errors are always
#      ignored)
#   -= there is no rsyncerr, because a) there isn't really anything to skip
#      to, and b) rsync errors are always treated as warnings since they're
#      usually caused by non-fatal problems like files being deleted during
#      the backup
#
###on_tunerr=
###on_dbreplerr=
###on_dblisterr=
###on_dbnameerr=
###on_dbduplerr=
###on_dbdumperr=
###on_dbziperr=


#####################
# checks and logging
#####################

#
# how often to actually run a backup, in minutes
#
# if runevery="0", no check will be performed, and a backup
# will be attempted every time the script is run
#
# otherwise, a backup will only be attempted if this amount of time has
# passed since the last backup was started (see startedfile, below)
#
# * if blank or unset, defaults to "0"
#
###runevery=

#
# path to the backup-started timestamp file
#
# the timestamp is updated when a backup actually starts
#
# the script uses this for the runevery check, and it can also be used
# by other scripts (e.g., to check if backups haven't been run for a while)
#
# * _not_ ignored, even if runevery=0
# * if blank or unset, defaults to "/var/run/aeolus/started"
#
###startedfile=

#
# path to the lockfile
#
# (actually a directory for technical reasons, and since we have it, we can
# put temp files in it)
#
# * if blank or unset, defaults to "/var/run/aeolus/lock"
#
###lockfile=

#
# if the script has passed the runevery check, but the previous backup
# is still running or was interrupted (i.e., the lockfile is still present):
#
# -= it will send an alert to the mailto address(es)
# -= it will send further alerts every ifrunning minutes, unless
#    ifrunning="0" or the alerts are silenced
#    (run "aeolus usage" for more information on silencing alerts)
# -= either way, it will send an alert when it next successfully starts,
#    so you know that the previous backup finally finished, and the next one
#    has begun
#
# * if blank or unset, defaults to "120" (2 hours)
#
###ifrunning=

#
# path to the alert-timestamp file (used to track ifrunning)
#
# * _not_ ignored, even if ifrunning=0
# * if blank or unset, defaults to "[lockfile].alert"; e.g., if lockfile is
#   set to "/var/run/aeolus/lock", alertfile will default to
#   "/var/run/aeolus/lock.alert"
#
###alertfile=

#
# suppress email ("yes" or "no")?
# (see usage notes on output)
#
# * if blank or unset, defaults to "no"
#
###suppressemail=

#
# where to send alerts and errors
#
# one or more email addresses, separated by spaces
#
# * ignored if suppressmail="yes"
# * if blank or unset, defaults to "root@HOSTNAME" (where HOSTNAME is the
#   name of the local host as reported by the 'hostname' utility), or
#   "root@localhost" if the 'hostname' utility is not found
#
###mailto=

#
# subject line of alert/error emails
#
# * ignored if suppressmail="yes"
# * if blank or unset, defaults to "Aeolus alert on HOSTNAME" (where
#   HOSTNAME is the name of the local host as reported by the 'hostname'
#   utility), or just "Aeolus alert" if the 'hostname' utility is not found
#
###subject=

#
# path to the output log
# (see usage notes on output)
#
# this log gets a copy of the output of ssh, the DBMS commands, and rsync,
# plus a few timestamps and diagnostics
#
# if outputlog_layout="date", the filename will have outputlog_sep and a
# date string appended to it (see outputlog_sep and outputlog_date)
#
# output logs may be compressed in place (using any of the utilities
# supported by mysql_zipmode) without disrupting the script
#
# * can be blank for no log
# * if this is unset (as opposed to just blank), it defaults to
#   "/var/log/aeolus-output.log"
#
###outputlog=

#
# the file layout to use for the output logs
#
# "append": append to a single file, with no rotation
# "number": log to numbered files (lower number = more recent, most recent
#           has no number)
# "date": log to date-suffixed files (all suffixed, including the most
#         recent; see outputlog_date)
#
# for example, if outputlog="aeolus.log", outputlog_layout="number", and
#   outputlog_sep=".", the second-most-recent file will be named
#   "aeolus.log.1"
#
# * ignored if outputlog is blank
# * if blank or unset, defaults to "number"
#
###outputlog_layout=

#
# separator to use before number/date suffixes in output log names
#
# may not include '/' characters (directories in the path must be in the
# outputlog setting)
#
# * ignored if outputlog is blank or outputlog_layout="append"
# * can be more than one character, or blank
# * if this is unset (as opposed to just blank), it defaults to "."
#
###outputlog_sep=

#
# format string for the 'date' utility, for output log names
#
# leaving this blank is not recommended because it introduces spaces and
# other punctuation; better is something like "+%Y%m%d" (or "+%Y%m%d%H" if
# backups are run more than once a day); your 'date' utility must support
# whatever string you use
#
# dates refer to when the script starts; all files created during a given
# run of the script will have the same date suffix (or as close as possible;
# 'date' has to be run separately for, e.g., output logs and MySQL dumps)
#
# may not include '/' characters (directories in the path must be in the
# outputlog setting)
#
# * ignored if outputlog is blank or outputlog_layout is not "date"
# * can be blank
# * if this is unset (as opposed to just blank), it defaults to "+%Y%m%d"
#
###outputlog_date=

#
# number of logs to keep, including the current one
#
# 0 means no number limit (but there may still be a date limit; see
# dayslogs)
#
# note: currently applies only if outputlog_layout="number";
# however, dayslogs applies to both
#
# * ignored if outputlog is blank or outputlog_layout is not "number"
# * if blank or unset, defaults to "0"
#
###numlogs=

#
# days worth of logs to keep, including the current one
#
# 0 means no days limit (but there may still be a number limit; see numlogs)
#
# logs older than this many days are removed, first rounding _down_
# to the nearest day
#
# note: _does_ apply to both outputlog_layout="number" and "date"
#
# * ignored if outputlog is blank or outputlog_layout="append"
# * if blank or unset, defaults to "7"
#
###dayslogs=

#
# use syslog ("yes" or "no")?
# (see usage notes on output)
#
# * if blank or unset, defaults to "yes"
#
###usesyslog=

#
# syslog priority to use for status messages
#
# "daemon.info" is recommended
#
# * ignored if usesyslog="no"
# * if blank or unset, the system default will be used
#
###syslogstat=

#
# syslog priority to use for alerts/errors
#
# "daemon.err" is recommended
#
# * ignored if usesyslog="no"
# * if blank or unset, the system default will be used
#
###syslogerr=

#
# syslog tag to use for status and alert/error messages
#
# "aeolus" is recommended
#
# * ignored if usesyslog="no"
# * if blank or unset, the system default will be used
#
###syslogtag=

#
# print to stdout/stderr ("yes" or "no")?
# (see usage notes on output)
#
# * if blank or unset, defaults to "no"
#
###quiet=

#
# path to the status log
# (see usage notes on output)
#
# this gets a copy of all intentional script output except what goes in
# the output log
#
# * can be blank for no log
# * if this is unset (as opposed to just blank), it defaults to
#   "/var/log/aeolus.log"
#
###statuslog=


################################
# SSH settings for rsync tunnel
# (ignored if do_rsync="no")
################################

#
# username on the remote host
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, the ssh utility's default will be used (generally
#   the username the script is run by)
#
###rsync_sshuser=

#
# hostname of the remote host
#
# * ignored if rsync_mode is not "tunnel"
#
###rsync_sshhost=

#
# path to the SSH key file
#
# * ignored if rsync_mode is not "tunnel" or "nodaemon"
# * if blank or unset, the ssh utility's default will be used
#
###rsync_sshkeyfile=

#
# SSH port on the remote host
#
# * ignored if rsync_mode is not "tunnel" or "nodaemon"
# * if blank or unset, the ssh utility's default will be used (generally 22)
#
###rsync_sshport=

#
# hostname on the local end of the tunnel
#
# generally "localhost", but may need to be (e.g.) 127.0.0.1 or ::1
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "localhost"
#
###rsync_localhost=

#
# port number on the local end of the tunnel
#
# can be any valid unused port
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "8873"
#
###rsync_localport=

#
# hostname on the remote end of the tunnel; connected to from rsync_sshhost
#
# generally "localhost", but may need to be (e.g.) 127.0.0.1 or ::1
#
# it can also be something else entirely, for example if the purpose of the
# tunnel is to get through a firewall, but a connection cannot be made
# directly to the necessary server
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "localhost"
#
###rsync_remotehost=

#
# port number on remote end of the tunnel
#
# generally 873
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "873"
#
###rsync_remoteport=

#
# additional options to pass to the SSH client
#
# * must be an array (see usage notes on the config file)
# * ignored if rsync_mode is not "tunnel" or "nodaemon"
# * can be blank or unset
#
###rsync_sshoptions=()

#
# how long to wait for the SSH tunnel to be established, in seconds
#
# minimum setting allowed is 1 second
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "15"
#
###rsync_sshtimeout=


#################
# rsync settings
#################

#
# are we going to do an rsync backup ("yes" or "no")?
#
# if "no", the rest of the rsync settings and the rsync SSH tunnel settings
# are ignored
#
# * if blank or unset, defaults to "no"
#
###do_rsync=

#
# mode of operation ("tunnel", "direct", "nodaemon", or "local")
# (see usage notes on rsync modes)
#
# * if blank or unset, defaults to "tunnel"
#
###rsync_mode=

#
# source files and/or directories
# (see usage notes on rsync modes)
#
# note that directories ending with / will have their _contents_ transferred,
# while directories not ending with / will be transferred themselves
#
# * must be an array (see usage notes on the config file)
#
###rsync_source=()

#
# destination
# (see usage notes on rsync modes)
#
###rsync_dest=

#
# remote rsyncd port
# (see usage notes on rsync modes)
#
# * ignored if rsync_mode is not "direct"
# * if blank or unset, the rsync utility's default will be used (generally
#   873)
#
###rsync_port=

#
# path to the password file (for the remote rsync user)
#
# the file must contain only the password to use
#
# * ignored if rsync_mode is not "tunnel" or "direct"
# * if blank, no password file will be used, and rsync will prompt for a
#   password if the remote host requires one (which can be a problem if,
#   e.g., the script is being run from cron)
# * if this is unset (as opposed to just blank), it defaults to
#   "/etc/aeolus/rsync.pw"
#
###rsync_pwfile=

#
# path to the filter-rules file
#
# suggested location: /etc/aeolus/rsync.filter
#
# one particularly important use: the lockfile should not be transferred
# if it is in the source directories; specifically, it should be hidden
# (meaning not copied, and deleted from the remote host if present)
#
# * can be blank or unset for no file; file can also be empty
#
###rsync_filterfile=

#
# additional options to rsync
#
# typical options: -va --sparse --numeric-ids --delete
# (note that -H (to preserve hard links) takes a lot of memory)
#
# * must be an array (see usage notes on the config file)
# * can be blank or unset
#
###rsync_options=()

#
# yet more options to rsync
#
# mostly useful to pass additional options from the command line without
# having to repeat the ones in the config file
#
# * must be an array (see usage notes on the config file)
# * can be blank or unset
#
###rsync_add=()


############################################
# MySQL dump settings, including SSH tunnel
############################################

#
# are we going to do a MySQL dump ("yes" or "no")?
#
# if "no", the rest of the MySQL dump settings, including the MySQL SSH
# tunnel settings, are ignored
#
# * if blank or unset, defaults to "no"
#
###mysql_dodump=

#
# MySQL SSH tunnel settings
# (see rsync SSH tunnel settings for descriptions, but disregard references
# to rsync_mode)
#
# usually the databases are dumped on the actual database server, but
# sometimes they have to be dumped remotely; using an SSH tunnel will
# slow the process down, but increase security
#
# MySQL does have SSL support, but it's not directly supported by this
# script; see mysql_options and mysql_dumpoptions
#
# * if mysql_usetunnel="no", the rest of these are ignored
#
###mysql_usetunnel=  # "yes" or "no", * if blank or unset, defaults to "no"
###mysql_sshuser=
###mysql_sshhost=
###mysql_sshkeyfile=
###mysql_sshport=
###mysql_localhost=  # defaults to "127.0.0.1"
###mysql_localport=  # * if blank or unset, defaults to "4306"
###mysql_remotehost=
###mysql_remoteport=  # * if blank or unset, defaults to "3306" (usual port)
###mysql_sshoptions=()
###mysql_sshtimeout=

#
# MySQL username
#
# * if blank or unset, MySQL's default will be used (generally the system
#   user the script is run by)
#
###mysql_user=

#
# path to the password file for connecting to the MySQL server
#
# the file must contain:
#   [client]
#   password="PASSWORD"
# where PASSWORD is the password to use (everything else is literal)
#
# * if blank, MySQL's default will be used (generally no password)
# * if this is unset (as opposed to just blank), it defaults to
#   "/etc/aeolus/mysql.pw"
#
###mysql_pwfile=

#
# protocol for connecting to the MySQL server (e.g., "tcp", "socket",
# "pipe")
#
# usually doesn't need to be specified; see the MySQL documentation for more
# info, and mysql_socketfile, below
#
# specifying mysql_host, mysql_port, and/or mysql_socketfile may cause
# errors depending on the value of this setting (e.g., "tcp" is incompatible
# with mysql_socketfile)
#
# if mysql_usetunnel="yes", must be blank, unset, or "tcp"
#
# * can be blank or unset
#
###mysql_protocol=

#
# hostname of the MySQL server
#
# in case you need to remotely dump databases; also, localhost and 127.0.0.1
# may give different results, e.g., connecting via socket or TCP
#
# * ignored if mysql_usetunnel="yes" (specify the host in mysql_sshhost
#   instead in that case)
# * if blank or unset, MySQL's default will be used (generally localhost)
#
###mysql_host=

#
# port for connecting to the MySQL server
#
# * ignored if mysql_usetunnel="yes" (specify the port in mysql_remoteport
#   instead in that case)
# * if blank or unset, MySQL's default will be used (generally 3306)
#
###mysql_port=

#
# path to the socket file for connecting to the MySQL server
#
# typically /tmp/mysql.sock or /var/run/mysqld/mysqld.sock
#
# if mysql_protocol="pipe", this is the path to the pipe
#
# * ignored if mysql_usetunnel="yes", mysql_host is specified, or mysql_port
#   is specified
# * if blank or unset, MySQL's default will be used
#
###mysql_socketfile=

#
# there is no mysql_connectdb setting (see postgres_connectdb)
#

#
# replication status required to do the dump(s)
#
# can be used to not dump old data, or to let the DBMS catch up before
# performing dumps which might make it even further behind
#
# in the case of MySQL, this is a Seconds_Behind_Master threshold; the value
# must be at or below this for the dump(s) to proceed
#
# * if blank or unset, replication status will not be checked
#
###mysql_replstatus=

#
# dump all databases?
#
# "all" to dump everything
# "include" to dump only those databases listed in mysql_dblist
# "exclude" to dump everything _except_ those DBs listed in mysql_dblist
#
# if you get table-locking errors trying to dump the special
# 'information_schema' database, see mysql_usealtopts
#
# * if blank or unset, defaults to "all"
#
###mysql_dbmode=

#
# list of databases
#
# see mysql_dbmode for usage
#
# * must be an array (see usage notes on the config file)
# * ignored if mysql_dbmode="all"
# * can be blank or unset if mysql_dbmode="include" or "exclude"
#
###mysql_dblist=()

#
# put each database in a separate file ("yes"), or put all of the dumped
# databases in one file ("no")?
#
# if "no", dumpfile names will include the names of the databases; see the 
# note on dumpfile names, below
#
# * if blank or unset, defaults to "no"
#
###mysql_splitdbs=

#
# options to pass to the MySQL client
#
# the client will also be passed
#   -BN -e "SHOW DATABASES;"
# regardless of this setting, as well as the necessary connection/password
# options
#
# if connecting with SSL, add your SSL options here
#
# * must be an array (see usage notes on the config file)
# * for MySQL, ignored unless either mysql_dbmode="all" and
#   mysql_splitdbs="yes", or mysql_dbmode="exclude" (may be different for
#   other DBMSes)
# * can be blank or unset
#
###mysql_options=()

#
# options to pass to the mysqldump utility
#
# the utility will also be passed:
#   "-A" if mysql_dbmode="all" and mysql_splitdbs="no", or
#   "-B" if mysql_dbmode is not "all" and mysql_splitdbs="no"
# regardless of this setting, as well as the necessary connection/password
# options
#
# if connecting with SSL, add your SSL options here
#
# mysql_options will NOT be included
#
# the usual options are "--opt" and "-Q" (which are on by default in recent
# versions), but some other (potentially) useful options include:
#   "-R": include stored procedures and functions
#         NOTE: may not work with DBs with newlines in their names;
#               this may be a bug in MySQL
#   "-c": include column names in INSERTs
#   "--skip-extended-insert": one INSERT per row, especially useful when
#                             working with grant tables (overrides --opt)
#   "-d": no data, only dump the schema
#   "-l": read-lock all tables in each DB while it's dumped (included in
#         --opt)
#   "-x": read-lock all tables in all DBs during the entire dump (overrides
#         --opt / -l)
#   "--single-transaction": uses transactions instead of locking, for
#                           InnoDB tables only
#   "--master-data": include replication info (implies -x unless
#                    --single-transaction is also used)
# note that options are order-sensitive; later ones override earlier ones
#
# * must be an array (see usage notes on the config file)
# * can be blank (i.e., mysql_dumpoptions=(""))
# * if this is unset (as opposed to just blank), it defaults to
#   (--opt -Q -R -c)
#
###mysql_dumpoptions=()

#
# alternative dump options for particular databases
#
# this feature allows you to selectively override mysql_dumpoptions, but
# only if mysql_splitdbs="yes"
#
# mysql_usealtopts can be "yes" or "no"
#
# if "yes", you must define a function called mysql_altopts which
#   - takes the name of a database
#   - returns 1 (false) if mysql_dumpoptions should be used
#   - otherwise, returns 0 (true) and sets a global array called altopts
#
# you can also set mysql_usealtopts to "yes" but not define the function,
# in which case the default is used (see below; see also the usage notes
# on the config file)
#
# alternate options completely override mysql_dumpoptions; any options
# set there must be repeated in the altopts array if they are to be used
#
# this feature is particularly useful for the special 'information_schema'
# DB - use the same options as in mysql_dumpoptions, plus
# '--skip-lock-tables'; however, note the following, from the mysqldump man
# page:
#     mysqldump does not dump the INFORMATION_SCHEMA database by default.
#     As of MySQL 5.1.38, mysqldump dumps INFORMATION_SCHEMA if you name it
#     explicitly on the command line, although you must also use the
#     --skip-lock-tables option. Before 5.1.38, mysqldump silently ignores
#     INFORMATION_SCHEMA even if you name it explicitly on the command
#     line.
# (similar conditions apply to the v5.5 'performance_schema' DB as well)
#
# it can also be useful for dumping the grants DB with
# "--skip-extended-insert" while not wasting space in the other dumps
#
# default function (also useful as a template):
#
# ----------
# #
# # if the function already exists, don't redefine it;
# # use this technique with your functions if you want to be able to
# # override them from the command line
# # (funcisnotdefined() is a useful library function included by the script)
# #
# if funcisnotdefined "mysql_altopts"; then
#   mysql_altopts () {
#     case "$1" in
#       information_schema|performance_schema)
#         # copyarray() is a useful library function included by the script
#         copyarray "mysql_dumpoptions" "altopts" exact  # incl regular opts
#         altopts+=(--skip-lock-tables)
#         return 0
#         ;;
#       mysql)
#         copyarray "mysql_dumpoptions" "altopts" exact  # incl regular opts
#         altopts+=(--skip-extended-insert)
#         return 0
#         ;;
#     esac
#
#     return 1
#   }
# fi
# ----------
#
# * setting and function are ignored if mysql_splitdbs="no"; function is
#   also ignored if setting is "no"
# * if blank or unset, setting defaults to "yes"; see above for function
#   default
#
###mysql_usealtopts=
###mysql_altopts () { }

#
# path to a directory that will contain the dumps
#
# (this is NOT the subdirectory used if mysql_layout is a "dir" option;
# it is the parent directory of that subdirectory)
#
# trailing '/' can be omitted
#
# * if blank or unset, defaults to "."
#
###mysql_dumpdir=

#
# the file layout to use for the dumps
#
# "single": store files in mysql_dumpdir, with no rotation
# "number": store numbered files in mysql_dumpdir
#           (lower number = more recent, most recent has no number)
# "date": store date-suffixed files in mysql_dumpdir (all suffixed,
#         including the most recent; see mysql_filedirdate)
# "singledir": store files in an unrotated subdirectory of mysql_dumpdir
# "numberdir": store files in numbered subdirectories of mysql_dumpdir
#              (lower number = more recent, most recent has no number)
# "datedir": store files in date-suffixed subdirectories of mysql_dumpdir
#            (all suffixed, including the most recent; see
#            mysql_filedirdate)
#
# in the case of the "numberdir" and "datedir" options, the subdirectory
#   will be labeled with a number or date, but the files will not
#
# see notes, below, about subdirectory and dumpfile names
#
# * if blank or unset, defaults to "date"
#
###mysql_layout=

#
# subdirectory names, if mysql_layout is a "dir" option, are constructed
#   as follows, within mysql_dumpdir:
# -= if mysql_layout="singledir", the subdirectory will be named
#      [subdirprefix]
# -= if mysql_layout="numberdir", the current (most recent) subdirectory
#      will be named [subdirprefix]
# -= in all other cases, the subdirectories will be named
#      [subdirprefix][filedirsep][number/date]
#
# dumpfile names are constructed as follows, within mysql_dumpdir or the
#   the subdirectory described above (dbname will be omitted if
#   mysql_splitdbs="no"):
# -= if mysql_layout="single" or a "dir" option, the files will be named
#      [fileprefix][dbname][filesuffix]
# -= if mysql_layout="number", the current (most recent) file will be named
#      [fileprefix][dbname][filesuffix]
# -= in all other cases, the files will be named
#      [fileprefix][dbname][filedirsep][number/date][filesuffix]
#
# e.g., if mysql_layout="number", mysql_fileprefix="mydbs-",
# mysql_filedirsep=".", and mysql_suffix=".sql", you could have a file
# named "mydbs-bigdb.3.sql", which would be the 4th oldest copy (including
# the current one) of a database named 'bigdb'
#
# caveat: filedirsep will be omitted if there's nothing in front of it (see
# mysql_filedirsep, below)
#

#
# prefix to prepend to the names of the database dumpfiles
# (see notes, above)
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * can be blank if mysql_splitdbs="yes", or mysql_layout="date", or
#   mysql_layout is not "date" and mysql_filesuffix is not blank
# * if this is unset (as opposed to just blank), it defaults to "mysqldump"
#
###mysql_fileprefix=

#
# suffix to append to the names of the database dumpfiles
# (see notes, above)
#
# usually ".sql" or ".txt"
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * can be blank if mysql_splitdbs="yes", or mysql_layout="date", or
#   mysql_layout is not "date" and mysql_fileprefix is not blank
# * if this is unset (as opposed to just blank), it defaults to ".sql"
#
###mysql_filesuffix=

#
# name of the subdirectories to use if mysql_layout is a "dir" option
# (see notes, above)
#
# will have number or date suffixes added if mysql_layout is not "singledir"
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting; "dir"-layout subdirectories must be only one
# layer deep)
#
# * ignored if mysql_layout is not a "dir" option
# * can be blank if mysql_layout="datedir"; however, you must be especially
#   careful to have the dumpdir contain only MySQL dump subdirectories,
#   because everything in the dumpdir will be subject to pruning (see
#   mysql_numfiles / mysql_daysfiles)
# * if this is unset (as opposed to just blank), it defaults to "mysqldump"
#
###mysql_subdirprefix=

#
# separator to use before number/date suffixes in dumpfile/subdirectory
# names
# (see notes, above)
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * ignored if any of these are true:
#   -= mysql_layout="single" or "singledir"
#   -= mysql_layout="number" or "date", mysql_splitdbs="no", and
#      mysql_fileprefix is blank (see mysql_fileprefix for when that's
#      allowed)
#   -= mysql_layout="datedir" and mysql_subdirprefix is blank
#   (the last two mean that no separator will be used if there's nothing
#   in front of it)
# * can be more than one character, or blank
# * if this is unset (as opposed to just blank), it defaults to "-"
#
###mysql_filedirsep=

#
# format string for the 'date' utility, for dumpfile/subdirectory names
# (see notes, above)
#
# leaving this blank is not recommended because it introduces spaces and
# other punctuation; better is something like "+%Y%m%d" (or "+%Y%m%d%H" if
# backups are run more than once a day); your 'date' utility must support
# whatever string you use
#
# dates refer to when the script starts; all files created during a given
# run of the script will have the same date suffix (or as close as possible;
# 'date' has to be run separately for, e.g., output logs and MySQL dumps)
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * ignored if mysql_layout is not "date" or "datedir"
# * can be blank
# * if this is unset (as opposed to just blank), it defaults to "+%Y%m%d"
#
###mysql_filedirdate=

#
# number of dumps to keep, including the current one
#
# 0 means no number limit (but there may still be a date limit; see
# mysql_daysfiles)
#
# note: currently applies only if mysql_layout="number" or "numberdir";
# however, mysql_daysfiles applies to both
#
# * ignored if mysql_layout is not "number" or "numberdir"
# * if blank or unset, defaults to "0"
#
###mysql_numfiles=

#
# days worth of dumps to keep, including the current one
#
# 0 means no days limit (but there may still be a number limit; see
# mysql_numfiles)
#
# dumps older than this many days are removed, first rounding _down_
# to the nearest day
#
# note: _does_ apply to both "number"/"numberdir" and "date"/"datedir"
#
# * ignored if mysql_layout is "single" or "singledir"
# * if blank or unset, defaults to "7"
#
###mysql_daysfiles=

#
# what kind of compression to use: "none", "gzip", "pigz", "bzip2",
# "lzip", or "xz"
#
# lzip is particularly useful because it has features to aid in the
# recovery of damaged files
#
# xz is only supported in the regular format; use of --format=lzma will
# cause problems
#
# if not set to "none", each file will be compressed in place
#
# * if blank or unset, defaults to "gzip"
#
###mysql_zipmode=

#
# additional options to pass to the compression utility
#
# for GNU gzip, "--rsyncable" is useful; other options include "-1" through
# "-9" to tune the size of the file vs. the amount of CPU resources required
# to zip it
#
# * must be an array (see usage notes on the config file)
# * ignored if mysql_zipmode="none"
# * can be blank or unset
#
###mysql_zipoptions=()

#
# when dumping, we can have one of two preservation priorities:
# "data": preserve old data longer, especially in case an error prevents
#         us from obtaining new data
# "space": keep the total disk space usage during the backup process as low
#          as possible
#
# -= in "single"/"singledir" modes, we can use temp files during the dump,
#    then move them into place ("data"), or remove the old files (including
#    zips) before starting it ("space")
# -= the same choice applies if a dump file already exists when it
#    shouldn't, but "warn" or "ignore" modes are set
# -= we can prune old files only after we have finished the current dump
#    ("data"), or remove them before we start it ("space")
#
# * if blank or unset, defaults to "data"
#
###mysql_preserve=

#
# hook to run a function after each dump
#
# this feature allows you to run arbitrary code after each MySQL dump
#
# mysql_useaftereach can be "yes" or "no"
#
# if "yes", you must define a function called mysql_aftereach which takes
# two parameters:
# $1 = the database name if the dump was of a single database, else blank
# $2 = the return value from db_dodump():
#      1 to mean "skip to the next phase of the backup (e.g., DBMS/rsync)",
#      2 to mean "we have skipped this dump",
#      else 0
#
# your function can access any of the internal variables of the script;
# it is recommended to study the code before writing functions, and to use
# the available logging tools
#
# sample function:
#
# ----------
# #
# # if the function already exists, don't redefine it;
# # use this technique with your functions if you want to be able to
# # override them from the command line
# # (funcisnotdefined() is a useful library function included by the script)
# #
# if funcisnotdefined "mysql_aftereach"; then
#   # dump locally for speed, but then offload the files to an NFS mount to
#   # save space; move everything, even if the dump failed
#   mysql_aftereach () {
#     logstatus "moving dump file $dumpprefix$1$dumpsuffix, including compressed versions, to /some/nfs/mount/"
#     movefilezip "$dumpprefix$1$dumpsuffix" "/some/nfs/mount/"
#   }
# fi
# ----------
#
# * function is ignored if setting is "no"
# * if blank or unset, setting defaults to "no"
#
###mysql_useaftereach=
###mysql_aftereach () { }


#################################################
# PostgreSQL dump settings, including SSH tunnel
#################################################

#
# see MySQL for descriptions; only differences from MySQL
# will be noted below
#

###postgres_dodump=

#
# this script does not directly support connection options other than the
# basics (e.g., no SSL); to use advanced features, set the environment
# variables listed in:
# http://www.postgresql.org/docs/9.2/static/libpq-envars.html
# (or the relevant version), _excluding_ PGPASSFILE, which is set by the
# script
#
# these variables can be set in the config file and exported, set on the
# command line when calling the script, or set in and exported from the
# shell/wrapper/etc. which runs the script
#

###postgres_usetunnel=
###postgres_sshuser=
###postgres_sshhost=
###postgres_sshkeyfile=
###postgres_sshport=
###postgres_localhost=  # defaults to "localhost"
###postgres_localport=  # defaults to "6432"
###postgres_remotehost=
###postgres_remoteport=  # defaults to "5432"
###postgres_sshoptions=()
###postgres_sshtimeout=

###postgres_user=

#
# path to the password file for connecting to the PostgreSQL server
#
# the file must contain lines of the form:
#   hostname:port:database:username:password
# where:
#   - only the colons are literal; all 5 parts must be substituted with
#     the relevant values
#   - the first 4 values specify a context in which to use the password;
#     they can each be * (for "any"), so usually the file will contain:
#       *:*:*:*:password
#   - by adding a more specific context to each line, a single file can
#     be made to contain multiple passwords for different invocations of the
#     script
#   - any : or \ characters in the values must be preceded by a \
#   - the file must not be group- or world-accessible or it will be ignored;
#     i.e., set it to mode 600
#
# * if blank, PostgreSQL's default will be used (~/.pgpass)
# * if this is unset (as opposed to just blank), it defaults to
#   "/etc/aeolus/postgres.pw"
#
###postgres_pwfile=

#
# there is no postgres_protocol setting (i.e., it is always ignored)
#

#
# hostname and port of the PostgreSQL server
#
# to connect via TCP:
#   - specify a hostname (a string not starting with '/')
#   - both 'localhost' and '127.0.0.1' will connect via TCP
#   - the port is optional
#
# to connect via socket file:
#   - specify the directory containing the socket in postgres_host; this
#     must start with '/', so it must be an absolute (not relative) path
#   - optionally, specify a port number in postgres_port; this will be used
#     as the suffix of the socket file
#   - the file used will be 'HOST/.s.PGSQL.PORT', where HOST and PORT are
#     the given settings
#   - there is apparently no way to specify the full name of the socket
#     file, or to use anything other than a port number as the suffix
#   - typical socket locations are /tmp/.s.PGSQL.5432 and
#     /var/run/postgresql/.s.PGSQL.5432
#
# * ignored if postgres_usetunnel="yes" (instead, specify the host in
#   postgres_sshhost and the port in postgres_localport)
# * if blank or unset, PostgreSQL's defaults will be used
#
###postgres_host=
###postgres_port=

#
# there is no postgres_socketfile setting (see postgres_host and
# postgres_port instead)
#

#
# database for initial PostgreSQL connections
#
# PostgreSQL requires a database to connect to even for commands that don't
# use any (such as getting the list of databases)
#
# * ignored unless either postgres_dbmode="all" and postgres_splitdbs="yes",
#   or postgres_dbmode="exclude" (may be different for other DBMSes)
# * if blank or unset, defaults to "postgres"
#
###postgres_connectdb=

#
# there is no postgres_replstatus setting (yet)
#

###postgres_dbmode=
###postgres_dblist=()
###postgres_splitdbs=  # may only be "no" if postgres_dbmode="all"

#
# options to pass to the PostgreSQL client
#
# the client will also be passed
#   -At -c "SELECT datname FROM pg_catalog.pg_database;"
# regardless of this setting, as well as the necessary connection/password
# options
#
###postgres_options=()

#
# options to pass to the pg_dump / pg_dumpall utilities
#
# pg_dumpall (postgres_dumpalloptions) is only used if postgres_dbmode="all"
# and postgres_splitdbs="no" (which is the default); there are several
# differences in behavior beyond simply dumping all of the databases at once
# vs. one database at a time:
#
#   - PostgreSQL maintains some information outside of any database,
#     including roles and tablespaces; pg_dumpall includes this information
#     by default, but there is apparently no way to get it using pg_dump,
#     so if you need to dump the DBs separately but you also need the global
#     data, you will need to do a second dump using pg_dumpall with the "-g"
#     option (see below)
#     [an option to do this automatically will eventually be added to the
#     script; currently you will need a separate invocation of the script
#     with the appropriate options]
#
#   - pg_dumpall always adds commands to the dump to create and connect to
#     the DBs (the equivalent of "-C", see below); this is generally fine
#     for dumping and reloading an entire DB installation, but it makes it
#     harder to reload DBs while changing their names (e.g. to make an old
#     version accessible while not destroying a live version)
#     this is also why "-C" is not included in the default for
#     postgres_dumponeoptions
#
#   - when using "-c" (see below), pg_dumpall adds commands to the dump to
#     drop all DBs before reloading any of them, whereas pg_dump drops all
#     tables before reloading any of them; if you want to drop/reload only
#     one DB at a time, you will need to use separate dumps for each DB
#
# postgres_options will NOT be included
#
# the only option usually needed is "-c" (drop DBs/tables/etc. before
# recreating, see above), but some other (potentially) useful options
# include:
#
# "--lock-wait-timeout=N": N is the maximum number of milliseconds to wait
#                          for a lock to be obtained before dumping
#                          (if exceeded, dump fails)
# "-a": only include the data, not the schema
# "-s": only include the schema, not the data
# "-g": only include global data such as roles and tablespaces, no DBs
#       (only applies to postgres_dumpalloptions; see above)
# "-C": add commands to the dump to create and connect to the DB (only
#       applies to postgres_dumponeoptions; see above)
# "-x": don't include the permissions with the DB(s) (dumps usually include
#       applicable permissions, but not the roles (users) themselves)
# "-O": don't include ownership assignments of tables, etc.
# "--no-tablespaces": don't include tablespace assignments of tables, etc.
# "--inserts": use individual INSERT statements instead of mass COPYs;
#              slower, but more portable and easier to post-process
# "--column-inserts": like "--inserts", but also includes column names
# "--quote-all-identifiers": put all DB/table/column/etc. names in double-
#                            quotes (mainly useful for future-proofing
#                            and post-processing)
#
# * must be arrays (see usage notes on the config file)
# * can be blank (e.g., postgres_dumponeoptions=(""))
# * if these are unset (as opposed to just blank), they default to (-c)
#
###postgres_dumponeoptions=()
###postgres_dumpalloptions=()

###postgres_usealtopts=  # defaults to no; note that MySQL examples do not
                         # apply here
###postgres_altopts () { }  # no default function for PostgreSQL
###postgres_dumpdir=
###postgres_layout=
###postgres_fileprefix=  # defaults to "postgresdump" if unset (not blank)
###postgres_filesuffix=
###postgres_subdirprefix=  # defaults to "postgresdump" if unset (not blank)
###postgres_filedirsep=
###postgres_filedirdate=
###postgres_numfiles=
###postgres_daysfiles=
###postgres_zipmode=
###postgres_zipoptions=()
###postgres_preserve=
###postgres_useaftereach=
###postgres_aftereach () { }
