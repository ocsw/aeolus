###########################################################
# sample configuration file for Aeolus, by Daniel Malament
###########################################################

#
# This is a shell script; see the USAGE file for more information.
# For license info, run 'aeolus license' or see the LICENSE file.
#

#
# The settings below are presented in roughly the order in which they are
# used by the script; in particular, any of the DBMS dumps, rsync, and
# rdiff-backup which are turned on, happen in the order below.
#


#########################
#      housekeeping
#########################

#
# search path for executables
# (see usage notes on portability)
#
# typical safe value:
# usepath="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
#
# * can be blank or unset, for the system default
#
###usepath=

#
# umask value
#
# generally 077 (more secure, but less accessible), or 022 (more accessible,
# but less secure; not necessarily a good idea); 077 is strongly recommended
#
# * can be blank or unset, for the system default
#
###useumask=

#
# in order to use a non-0 runevery or ifrunning (see below), your system
# must support one of:
#   "find":       find . -mmin +N
#   "date-r":     date -r fileref "+%s"
#   "date-d":     date -d "N minutes ago" "+%Y%m%d%H%M.%S"
#   "awk"/"gawk": awk/gawk with strftime() and systime()
#
# "date-d", "awk", and "gawk" also require 'touch -t timestamp' and
# 'find . -newer fileref', but those should usually be available
#
# note that the rounding behavior of the various options may differ;
# "date-d", "awk", and "gawk" should be accurate to within one second, but
# the other options may have up to a 59-second lag
#
# * ignored if runevery and ifrunning are both 0
# * if blank or unset, defaults to "find"
#
###timecomptype=

#
# for key commands, print the actual commands run ("yes" or "no")?
#
# this applies to SSH, DBMS, compression, rsync, and rdiff-backup commands
#
# commands will be printed preceded by 'cmd: '
#
# note that any variables set on the same line as the command will be
# printed on separate lines, one variable per line, e.g.:
#   cmd: PGPASSFILE=postgres.pw
#   cmd: pg_dump -U postgres -h 127.0.0.1 -c postgres
#
# also, the line 'cmd: endcmdprint' will follow the output of each command,
# or in certain cases precede the printing of the command itself
#
# * if blank or unset, defaults to "no"
#
###printcmds=

#
# debug the script ("yes" or "no")?
#
# currently, turns on shell tracing (set -vx)
#
# * if blank or unset, defaults to "no"
#
###debugme=


###############################
#      checks and logging
###############################

#
# how often to actually run a backup, in minutes
#
# if runevery="0", no check will be performed, and a backup
# will be attempted every time the script is run
#
# otherwise, a backup will only be attempted if this amount of time has
# passed since the last backup was started (see startedfile, below)
#
# * if blank or unset, defaults to "0"
#
###runevery=

#
# path to the backup-started timestamp file
#
# the timestamp is updated when a backup actually starts
#
# the script uses this for the runevery check, and it can also be used
# by other scripts (e.g., to check if backups haven't been run for a while)
#
# * _not_ ignored, even if runevery=0
# * if blank or unset, defaults to "/var/log/aeolus.started"
#
###startedfile=

#
# path to the lockfile
#
# (actually a directory for technical reasons, and since we have it, we can
# put temp files in it)
#
# * if blank or unset, defaults to "/var/run/aeolus.lock"
#
###lockfile=

#
# if the script has passed the runevery check, but the previous backup
# is still running or was interrupted (i.e., the lockfile is still present):
#
# -= it will send an alert to the alertmailto address(es)
# -= it will send further alerts every ifrunning minutes, unless
#    ifrunning="0" or the alerts are silenced
#    (run "aeolus usage" for more information on silencing alerts)
# -= either way, it will send an alert when it next successfully starts,
#    so you know that the previous backup finally finished, and the next one
#    has begun
#
# * if blank or unset, defaults to "120" (2 hours)
#
###ifrunning=

#
# path to the alert-timestamp file (used to track ifrunning)
#
# * _not_ ignored, even if ifrunning=0
# * if blank or unset, defaults to "[lockfile].alert"; e.g., if lockfile is
#   set to "/var/run/aeolus/lock", alertfile will default to
#   "/var/run/aeolus/lock.alert"
#
###alertfile=

#
# suppress email ("yes" or "no")?
# (see usage notes on output)
#
# * if blank or unset, defaults to "no"
#
###suppressemail=

#
# where to send alerts and errors
#
# one or more email addresses, separated by spaces
#
# * ignored if suppressmail="yes"
# * if blank or unset, defaults to "root@HOSTNAME" (where HOSTNAME is the
#   name of the local host as reported by the 'hostname' utility), or
#   "root@localhost" if the 'hostname' utility is not found
#
###alertmailto=

#
# subject line of alert/error emails
#
# * ignored if suppressmail="yes"
# * if blank or unset, defaults to "Aeolus alert on HOSTNAME" (where
#   HOSTNAME is the name of the local host as reported by the 'hostname'
#   utility), or just "Aeolus alert" if the 'hostname' utility is not found
#
###alertsubject=

#
# suppress printing to stdout/stderr ("yes" or "no")?
# (see usage notes on output)
#
# * if blank or unset, defaults to "no"
#
###quiet=

#
# use syslog ("yes" or "no")?
# (see usage notes on output)
#
# * if blank or unset, defaults to "yes"
#
###usesyslog=

#
# syslog priority to use for status messages
#
# "daemon.info" is recommended
#
# * ignored if usesyslog="no"
# * if blank or unset, the system default will be used
#
###syslogstat=

#
# syslog priority to use for alerts/errors
#
# "daemon.err" is recommended
#
# * ignored if usesyslog="no"
# * if blank or unset, the system default will be used
#
###syslogerr=

#
# syslog tag to use for status and alert/error messages
#
# "aeolus" is recommended
#
# * ignored if usesyslog="no"
# * if blank or unset, the system default will be used
#
###syslogtag=

#
# path to the status log
# (see usage notes on output)
#
# this gets a copy of all intentional script output except what goes in
# the output log
#
# * can be blank for no log
# * if this is unset (as opposed to just blank), it defaults to
#   "/var/log/aeolus.log"
#
###statuslog=

#
# path to the output log
# (see usage notes on output)
#
# this log gets a copy of the output of SSH, DBMS, compression, rsync, and
# rdiff-backup commands, plus a few timestamps and diagnostics
#
# if outputlog_layout="date", the filename will have outputlog_sep and a
# date string appended to it (see outputlog_sep and outputlog_date)
#
# output logs may be compressed in place (using any of the utilities
# supported by mysql_zipmode) without disrupting the script
#
# * can be blank for no log
# * if this is unset (as opposed to just blank), it defaults to
#   "/var/log/aeolus-output.log"
#
###outputlog=

#
# the file layout to use for the output logs
#
# "append": append to a single file, with no rotation
# "number": log to numbered files (lower number = more recent, most recent
#           has no number)
# "date": log to date-suffixed files (all suffixed, including the most
#         recent; see outputlog_date)
#
# for example, if outputlog="aeolus.log", outputlog_layout="number", and
#   outputlog_sep=".", the second-most-recent file will be named
#   "aeolus.log.1"
#
# * ignored if outputlog is blank
# * if blank or unset, defaults to "number"
#
###outputlog_layout=

#
# separator to use before number/date suffixes in output log names
#
# may not include '/' characters (directories in the path must be in the
# outputlog setting)
#
# * ignored if outputlog is blank or outputlog_layout="append"
# * can be more than one character, or blank
# * if this is unset (as opposed to just blank), it defaults to "."
#
###outputlog_sep=

#
# format string for the 'date' utility, for output log names
#
# leaving this blank is not recommended because it introduces spaces and
# other punctuation; better is something like "+%Y%m%d" (or "+%Y%m%d%H" if
# backups are run more than once a day); your 'date' utility must support
# whatever string you use
#
# dates refer to when the script starts; all files created during a given
# run of the script will have the same date suffix (or as close as possible;
# 'date' has to be run separately for, e.g., output logs and MySQL dumps)
#
# may not include '/' characters (directories in the path must be in the
# outputlog setting)
#
# * ignored if outputlog is blank or outputlog_layout is not "date"
# * can be blank
# * if this is unset (as opposed to just blank), it defaults to "+%Y%m%d"
#
###outputlog_date=

#
# number of logs to keep, including the current one
#
# 0 means no number limit (but there may still be a date limit; see
# dayslogs)
#
# note: currently applies only if outputlog_layout="number";
# however, dayslogs applies to both "number" and "date"
#
# * ignored if outputlog is blank or outputlog_layout is not "number"
# * if blank or unset, defaults to "0"
#
###numlogs=

#
# days worth of logs to keep
#
# 0 means no days limit (but there may still be a number limit; see numlogs)
#
# logs this many days old or older are removed
#
# (1 day = a full 24 hours; if you run the script once a day, and set
# dayslogs=1, the log from the previous run will be newer than 24 hours by
# by however long the script took to run, and it will be saved)
#
# note: _does_ apply to both outputlog_layout="number" and "date"
#
# * ignored if outputlog is blank or outputlog_layout="append"
# * if blank or unset, defaults to "7"
#
###dayslogs=


########################
#      MySQL dumps
########################

#
# are we going to do a MySQL dump ("yes" or "no")?
#
# if "no", the rest of the MySQL settings are ignored
#
# * if blank or unset, defaults to "no"
#
###mysql_dodump=

#
# MySQL SSH tunnel settings
#
# see rsync settings for descriptions, but disregard references to
# rsync_mode; only differences from those settings will be noted below
#
# if you need to dump databases remotely, using an SSH tunnel will slow
# the process down, but increase security
#
# MySQL does have SSL support, but it's not directly supported by this
# script; see mysql_options and mysql_dumpoptions
#
# * if mysql_usetunnel="no", the rest of these are ignored
#
###mysql_usetunnel=  # "yes" or "no", * if blank or unset, defaults to "no"
###mysql_sshuser=
###mysql_sshhost=
###mysql_sshkeyfile=
###mysql_sshport=
###mysql_localhost=  # defaults to "127.0.0.1"
###mysql_localport=  # defaults to "4306"
###mysql_remotehost=
###mysql_remoteport=  # defaults to "3306" (the usual port)
###mysql_sshoptions=()
###mysql_sshtimeout=

#
# MySQL username
#
# * if blank or unset, MySQL's default will be used (generally the system
#   user the script is run by)
#
###mysql_user=

#
# path to the password file for connecting to the MySQL server
#
# the file must contain:
#   [client]
#   password="PASSWORD"
# where PASSWORD is the password to use (everything else is literal)
#
# * if blank, MySQL's default will be used (generally no password)
# * if this is unset (as opposed to just blank), it defaults to
#   "/etc/aeolus/mysql.pw"
#
###mysql_pwfile=

#
# protocol for connecting to the MySQL server (e.g., "TCP", "SOCKET",
# "PIPE"; values are not case-sensitive)
#
# usually doesn't need to be specified; see the MySQL documentation and
# mysql_socketfile, below
#
# specifying mysql_host, mysql_port, and/or mysql_socketfile may cause
# errors depending on the value of this setting (e.g., "TCP" is incompatible
# with mysql_socketfile)
#
# if mysql_usetunnel="yes", must be blank, unset, or "TCP"
#
# * can be blank or unset
#
###mysql_protocol=

#
# hostname of the MySQL server
#
# note that "localhost" and "127.0.0.1" may give different results, e.g.,
# connecting via socket or TCP
#
# * ignored if mysql_usetunnel="yes" (specify the host in mysql_sshhost
#   instead in that case)
# * if blank or unset, MySQL's default will be used (generally localhost)
#
###mysql_host=

#
# port for connecting to the MySQL server
#
# * ignored if mysql_usetunnel="yes" (specify the port in mysql_remoteport
#   instead in that case)
# * if blank or unset, MySQL's default will be used (generally 3306)
#
###mysql_port=

#
# path to the socket file for connecting to the MySQL server
#
# typically /tmp/mysql.sock or /var/run/mysqld/mysqld.sock
#
# if mysql_protocol="PIPE", this is the path to the pipe
#
# * ignored if mysql_usetunnel="yes", mysql_host is specified, or mysql_port
#   is specified
# * if blank or unset, MySQL's default will be used
#
###mysql_socketfile=

#
# [there is no mysql_connectdb setting (see postgres_connectdb)]
#

#
# replication status required to do the dump(s)
#
# can be used to not dump old data, or to let the DBMS catch up before
# performing dumps which might make it even further behind
#
# for MySQL, this is a Seconds_Behind_Master threshold; the value must be
# at or below this for the dump(s) to proceed
#
# * if blank or unset, replication status will not be checked
#
###mysql_replstatus=

#
# dump all databases?
#
# "all" to dump everything
# "include" to dump only those databases listed in mysql_dblist
# "exclude" to dump everything except those databases listed in mysql_dblist
#
# if you get table-locking errors trying to dump the special
# 'information_schema' database, see mysql_usealtopts
#
# * if blank or unset, defaults to "all"
#
###mysql_dbmode=

#
# list of databases
#
# see mysql_dbmode for usage
#
# * must be an array (see usage notes on the config file)
# * ignored if mysql_dbmode="all"
#
###mysql_dblist=()

#
# [there is no mysql_globals setting]
#

#
# put each database in a separate file ("yes"), or put all of the dumped
# databases in one file ("no")?
#
# if "no", dumpfile names will include the names of the databases; see the 
# note on dumpfile names, below
#
# * if blank or unset, defaults to "no"
#
###mysql_splitdbs=

#
# options to pass to the MySQL client
#
# the client will also be passed
#   -BN -e "SHOW DATABASES;"
# regardless of this setting, as well as the necessary connection/password
# options
#
# if connecting with SSL, add your SSL options here
#
# * must be an array (see usage notes on the config file)
# * for MySQL, ignored unless either mysql_dbmode="all" and
#   mysql_splitdbs="yes", or mysql_dbmode="exclude" (may be different for
#   other DBMSes)
# * can be empty or unset
#
###mysql_options=()

#
# options to pass to the mysqldump utility
#
# the utility will also be passed:
#   "-A" if mysql_dbmode="all" and mysql_splitdbs="no", or
#   "-B" if mysql_dbmode is not "all" and mysql_splitdbs="no"
# regardless of this setting, as well as the necessary connection/password
# options
#
# if connecting with SSL, add your SSL options here
#
# mysql_options will NOT be included
#
# the usual options are "--opt" and "-Q" (which are on by default except
# in very old versions of MySQL), but some other (potentially) useful
# options include:
#   "-R": include stored procedures and functions
#         NOTE: may not work with databases with newlines in their names;
#               this may be a bug in MySQL
#   "-c": include column names in INSERTs
#   "--skip-extended-insert": one INSERT per row, especially useful when
#                             working with grant tables (overrides --opt)
#   "-d": no data, only dump the schema
#   "-l": read-lock all tables in each database while that database is
#         dumped (included in --opt)
#   "-x": read-lock all tables in all databases during the entire dump
#         (overrides --opt / -l)
#   "--single-transaction": uses transactions instead of locking, for
#                           InnoDB tables only
#   "--master-data": include replication info (implies -x unless
#                    --single-transaction is also used)
# note that options are order-sensitive; later ones override earlier ones
#
# * must be an array (see usage notes on the config file)
# * can be empty (i.e., mysql_dumpoptions=())
# * if this is unset (as opposed to just empty), it defaults to
#   (--opt -Q -R -c)
#
###mysql_dumpoptions=()

#
# [there are no mysql_dumponeoptions, mysql_dumpmultoptions, or
# mysql_dumpalloptions settings (see, e.g., postgres_dumponeoptions and
# postgres_dumpalloptions)]
#

#
# alternative dump options for particular databases
#
# this feature allows you to selectively override mysql_dumpoptions, but
# only if mysql_splitdbs="yes"
#
# mysql_usealtopts can be "yes" or "no"
#
# if "yes", you must define a function called mysql_altopts which takes the
# name of a database as the first parameter, and returns:
#   1 (false) if mysql_dumpoptions should be used
#   0 (true) if a global array called altopts should be used instead;
#     the function must define this array
#
# you can also set mysql_usealtopts to "yes" but not define the function,
# in which case the default is used (see below; see also the usage notes
# on the config file)
#
# alternate options completely override mysql_dumpoptions; any options
# set there must be repeated in the altopts array if they are to be used
#
# this feature is particularly useful for the special 'information_schema'
# database - use the same options as in mysql_dumpoptions, plus
# '--skip-lock-tables'; however, note the following, from the mysqldump man
# page:
#     mysqldump does not dump the INFORMATION_SCHEMA database by default.
#     As of MySQL 5.1.38, mysqldump dumps INFORMATION_SCHEMA if you name it
#     explicitly on the command line, although you must also use the
#     --skip-lock-tables option. Before 5.1.38, mysqldump silently ignores
#     INFORMATION_SCHEMA even if you name it explicitly on the command
#     line.
# (similar conditions apply to the v5.5 'performance_schema' database
# as well)
#
# this feature can also be useful for dumping the grants database with
# "--skip-extended-insert" while not wasting space in the other dumps
#
# default function (also useful as a template):
#
# ----------
# #
# # if the function already exists, don't redefine it;
# # use this technique with your functions if you want to be able to
# # override them from the command line
# # (funcisnotdefined() is a useful library function included by the script)
# #
# if funcisnotdefined "mysql_altopts"; then
#   mysql_altopts () {
#     case "$1" in
#       information_schema|performance_schema)
#         # copyarray() is a useful library function included by the script
#         copyarray "mysql_dumpoptions" "altopts" exact  # incl regular opts
#         altopts+=(--skip-lock-tables)
#         return 0
#         ;;
#       mysql)
#         copyarray "mysql_dumpoptions" "altopts" exact  # incl regular opts
#         altopts+=(--skip-extended-insert)
#         return 0
#         ;;
#     esac
#
#     return 1
#   }
# fi
# ----------
#
# * setting and function are ignored if mysql_splitdbs="no"; function is
#   also ignored if setting is "no"
# * if blank or unset, setting defaults to "yes"; see above for function
#   default
#
###mysql_usealtopts=
###mysql_altopts () { }

#
# path to a directory that will contain the dumps
#
# (this is NOT the subdirectory used if mysql_layout is a "dir" option;
# it is the parent directory of that subdirectory)
#
# trailing '/' can be omitted
#
# * if blank or unset, defaults to "."
#
###mysql_dumpdir=

#
# the file layout to use for the dumps
#
# "single": store files in mysql_dumpdir, with no rotation
# "number": store numbered files in mysql_dumpdir
#           (lower number = more recent, most recent has no number)
# "date": store date-suffixed files in mysql_dumpdir (all suffixed,
#         including the most recent; see mysql_filedirdate)
# "singledir": store files in an unrotated subdirectory of mysql_dumpdir
# "numberdir": store files in numbered subdirectories of mysql_dumpdir
#              (lower number = more recent, most recent has no number)
# "datedir": store files in date-suffixed subdirectories of mysql_dumpdir
#            (all suffixed, including the most recent; see
#            mysql_filedirdate)
#
# in the case of the "numberdir" and "datedir" options, the subdirectory
#   will be labeled with a number or date, but the files will not
#
# see notes, below, about subdirectory and dumpfile names
#
# * if blank or unset, defaults to "date"
#
###mysql_layout=

#
# subdirectory names, if mysql_layout is a "dir" option, are constructed
#   as follows, within mysql_dumpdir:
# -= if mysql_layout="singledir", the subdirectory will be named
#      [subdirprefix]
# -= if mysql_layout="numberdir", the current (most recent) subdirectory
#      will be named [subdirprefix]
# -= in all other cases, the subdirectories will be named
#      [subdirprefix][filedirsep][number/date]
#
# dumpfile names are constructed as follows, within mysql_dumpdir or the
#   the subdirectory described above (dbname will be omitted if
#   mysql_splitdbs="no"):
# -= if mysql_layout="single" or a "dir" option, the files will be named
#      [fileprefix][dbname][filesuffix]
# -= if mysql_layout="number", the current (most recent) file will be named
#      [fileprefix][dbname][filesuffix]
# -= in all other cases, the files will be named
#      [fileprefix][dbname][filedirsep][number/date][filesuffix]
#
# e.g., if mysql_layout="number", mysql_fileprefix="mydbs-",
# mysql_filedirsep=".", and mysql_suffix=".sql", you could have a file
# named "mydbs-bigdb.3.sql", which would be the 4th oldest copy (including
# the current one) of a database named 'bigdb'
#
# caveat: filedirsep will be omitted if there's nothing in front of it (see
# mysql_filedirsep, below)
#

#
# prefix to prepend to the names of the database dumpfiles
# (see notes, above)
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * can be blank if mysql_splitdbs="yes", or mysql_layout="date", or
#   mysql_layout is not "date" and mysql_filesuffix is not blank
# * if this is unset (as opposed to just blank), it defaults to "mysqldump"
#
###mysql_fileprefix=

#
# suffix to append to the names of the database dumpfiles
# (see notes, above)
#
# usually ".sql" or ".txt"
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * can be blank if mysql_splitdbs="yes", or mysql_layout="date", or
#   mysql_layout is not "date" and mysql_fileprefix is not blank
# * if this is unset (as opposed to just blank), it defaults to ".sql"
#
###mysql_filesuffix=

#
# name of the subdirectories to use if mysql_layout is a "dir" option
# (see notes, above)
#
# will have number or date suffixes added if mysql_layout is not "singledir"
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting; "dir"-layout subdirectories must be only one
# layer deep)
#
# * ignored if mysql_layout is not a "dir" option
# * can be blank if mysql_layout="datedir"; however, you must be especially
#   careful to have the dumpdir contain only MySQL dump subdirectories,
#   because everything in the dumpdir will be subject to pruning (see
#   mysql_numfiles / mysql_daysfiles)
# * if this is unset (as opposed to just blank), it defaults to "mysqldump"
#
###mysql_subdirprefix=

#
# separator to use before number/date suffixes in dumpfile/subdirectory
# names
# (see notes, above)
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * ignored if any of these are true:
#   -= mysql_layout="single" or "singledir"
#   -= mysql_layout="number" or "date", mysql_splitdbs="no", and
#      mysql_fileprefix is blank (see mysql_fileprefix for when that's
#      allowed)
#   -= mysql_layout="datedir" and mysql_subdirprefix is blank
#   (the last two mean that no separator will be used if there's nothing
#   in front of it)
# * can be more than one character, or blank
# * if this is unset (as opposed to just blank), it defaults to "-"
#
###mysql_filedirsep=

#
# format string for the 'date' utility, for dumpfile/subdirectory names
# (see notes, above)
#
# leaving this blank is not recommended because it introduces spaces and
# other punctuation; better is something like "+%Y%m%d" (or "+%Y%m%d%H" if
# backups are run more than once a day); your 'date' utility must support
# whatever string you use
#
# dates refer to when the script starts; all files created during a given
# run of the script will have the same date suffix (or as close as possible;
# 'date' has to be run separately for, e.g., output logs and MySQL dumps)
#
# may not include newline or '/' characters (directories in the path must be
# in the mysql_dumpdir setting, except for "dir"-layout subdirectories)
#
# * ignored if mysql_layout is not "date" or "datedir"
# * can be blank
# * if this is unset (as opposed to just blank), it defaults to "+%Y%m%d"
#
###mysql_filedirdate=

#
# number of dumps to keep, including the current one
#
# 0 means no number limit (but there may still be a date limit; see
# mysql_daysfiles)
#
# note: currently applies only if mysql_layout="number" or "numberdir";
# however, mysql_daysfiles applies to both number- and date-based layouts
#
# * ignored if mysql_layout is not "number" or "numberdir"
# * if blank or unset, defaults to "0"
#
###mysql_numfiles=

#
# days worth of dumps to keep
#
# 0 means no days limit (but there may still be a number limit; see
# mysql_numfiles)
#
# dumps this many days old or older are removed
#
# (1 day = a full 24 hours; if you run the script once a day, and set
# mysql_daysfiles=1, the dumps from the previous run will be newer than 24
# hours by by however long the script took to run, and they will be saved)
#
# note: _does_ apply to both "number"/"numberdir" and "date"/"datedir"
#
# * ignored if mysql_layout is "single" or "singledir"
# * if blank or unset, defaults to "7"
#
###mysql_daysfiles=

#
# what kind of compression to use: "none", "gzip", "pigz", "bzip2",
# "lzip", or "xz"
#
# lzip is particularly useful because it has features to aid in the
# recovery of damaged files
#
# xz is only supported in the regular format; use of --format=lzma will
# cause problems
#
# if not set to "none", each file will be compressed in place
#
# * if blank or unset, defaults to "gzip"
#
###mysql_zipmode=

#
# additional options to pass to the compression utility
#
# for GNU gzip, "--rsyncable" is useful; other options include "-1" through
# "-9" to tune the size of the file vs. the amount of CPU resources required
# to zip it
#
# * must be an array (see usage notes on the config file)
# * ignored if mysql_zipmode="none"
# * can be empty or unset
#
###mysql_zipoptions=()

#
# when dumping, we can have one of two preservation priorities:
# "data": preserve old data longer, especially in case an error prevents
#         us from obtaining new data
# "space": keep the total disk space usage during the backup process as low
#          as possible
#
# -= in "single"/"singledir" modes, we can use temp files during the dump,
#    then move them into place ("data"), or remove the old files (including
#    zips) before starting it ("space")
# -= the same choice applies if a dump file already exists when it
#    shouldn't, but "warn" or "ignore" modes are set
# -= we can prune old files only after we have finished the current dump
#    ("data"), or remove them before we start it ("space")
#
# * if blank or unset, defaults to "data"
#
###mysql_preserve=

#
# how to handle various errors
#
# possible options include:
#   "ignore" = silently ignore the error and continue (not recommended)
#   "warn" = send/log a warning, but continue
#   "db" = warn and abort this dump, skipping to the next database;
#          mysql_aftereach is called first, if appropriate
#   "phase" = warn and abort the entire MySQL dump sequence, skipping to the
#             next phase of the backup (i.e., the next DBMS, rsync, etc.);
$             mysql_aftereach and mysql_runafter are called first, if
#             appropriate
#   "exit" = exit the script with an error; neither mysql_aftereach nor
#            mysql_runafter is called first (see the addexitcallback library
#            function if that is a problem)
# (abbreviated below, but the full names must be used in the settings)
#
# error      | explanation
# --------------------------------------------------------------
#   tunerr   | error opening SSH tunnel
#   replerr  | error getting MySQL replication status
#   replstat | MySQL Seconds Behind Master is > mysql_replstatus
#   listerr  | error getting database list
#   nameerr  | database name contains a problematic character
#   duplerr  | database dumpfile already exists
#   dumperr  | error dumping database
#   ziperr   | error compressing database dump
#
# error      | allowed vals   | default
# -------------------------------------
#   tunerr   |          ph ex | "phase"
#   replerr  |          ph ex | "phase"
#   replstat | ig wa    ph ex | "phase"
#   listerr  |          ph ex | "phase"
#   nameerr  |       db ph ex | "db"
#   duplerr  | ig wa db ph ex | "db"
#   dumperr  | ig wa db ph ex | "db"
#   ziperr   | ig wa db ph ex | "db"
#
# note:
#   -= nameerr does not apply if mysql_splitdbs=no; see the usage notes
#      for more information
#   -= duplerr does not apply in single/singledir modes (errors are always
#      ignored)
#
###mysql_on_tunerr=
###mysql_on_replerr=
###mysql_on_replstat=
###mysql_on_listerr=
###mysql_on_nameerr=
###mysql_on_duplerr=
###mysql_on_dumperr=
###mysql_on_ziperr=

#
# hook to run a function after each dump
#
# this feature allows you to run arbitrary code after each MySQL dump
#
# mysql_useaftereach can be "yes" or "no"
#
# if "yes", you must define a function called mysql_aftereach which takes
# two parameters:
#   $1 = the database name if the dump was of a single database, else blank
#   $2 = the return value from db_dodump():
#        0 = dump was successful (or errors were ignored based on settings)
#        1 = the entire MySQL dump phase was aborted
#            the phaseerr variable will contain the exit value that would
#            have been used for the relevant error; see the top of the
#            script for a list
#        2 = this dump was skipped / aborted
#            the dberr variable will contain the exit value that would have
#            been used for the relevant error; see the top of the script for
#            a list
#
# your function can access any of the internal variables of the script;
# it is recommended to study the script and library code, and to use the
# available logging tools
#
# sample function:
#
# ----------
# #
# # if the function already exists, don't redefine it;
# # use this technique with your functions if you want to be able to
# # override them from the command line
# # (funcisnotdefined() is a useful library function included by the script)
# #
# if funcisnotdefined "mysql_aftereach"; then
#   # dump locally for speed, but then offload the files to an NFS mount to
#   # save space; move everything, even if the dump failed
#   mysql_aftereach () {
#     logstatus "moving dump file $dumpprefix$1$dumpsuffix, including compressed versions, to /some/nfs/mount/"
#     movefilezip "$dumpprefix$1$dumpsuffix" "/some/nfs/mount/"
#   }
# fi
# ----------
#
# * function is ignored if setting is "no"
# * if blank or unset, setting defaults to "no"
#
###mysql_useaftereach=
###mysql_aftereach () { }

#
# hooks to run functions before and after MySQL dumps
#
# this feature allows you to run arbitrary code before and after the MySQL
# phase of the script
#
# mysql_userunbefore and mysql_userunafter can be "yes" or "no";
# if "yes", you must define a function called mysql_runbefore or
# mysql_runafter, respectively
#
# mysql_runbefore takes no parameters, and can return:
#   0 = success
#   1 = skip the MySQL dump phase (mysql_runafter is called first, if
#       appropriate)
#   2 = abort the script completely (mysql_runafter is not called; see the
#       addexitcallback library function if that is a problem)
#
# mysql_runafter takes one parameter, which can be:
#   0 = MySQL dump phase finished normally
#   1 = MySQL dump phase was aborted
#       the phaseerr variable will contain the exit value that would have
#       been used for the relevant error; see the top of the script for a
#       list
# it can return:
#   0 = success
#   2 = abort the script
#
# your functions can access any of the internal variables of the script;
# it is recommended to study the script and library code, and to use the
# available logging tools
#
# see mysql_aftereach for an example that includes some useful techniques;
# the addexitcallback library function may also be useful in case you need
# to be sure certain things happen even if the mysql_runafter function never
# gets called (e.g., because the script aborts)
#
# * functions are ignored if the respective settings are "no"
# * if blank or unset, settings default to "no"
#
###mysql_userunbefore=
###mysql_runbefore () { }
###mysql_userunafter=
###mysql_runafter () { }


#############################
#      PostgreSQL dumps
#############################

#
# see MySQL for descriptions; only differences from MySQL
# will be noted below
#

###postgres_dodump=

#
# this script does not directly support connection options other than the
# basics (e.g., no SSL); to use advanced features, set the environment
# variables listed in:
# http://www.postgresql.org/docs/9.2/static/libpq-envars.html
# (or the relevant version), _excluding_ PGPASSFILE, which is set by the
# script
#
# these variables can be set in the config file and exported, set on the
# command line when calling the script, or set in and exported from the
# shell/wrapper/etc. which runs the script
#

###postgres_usetunnel=
###postgres_sshuser=
###postgres_sshhost=
###postgres_sshkeyfile=
###postgres_sshport=
###postgres_localhost=  # defaults to "localhost"
###postgres_localport=  # defaults to "6432"
###postgres_remotehost=
###postgres_remoteport=  # defaults to "5432"
###postgres_sshoptions=()
###postgres_sshtimeout=

###postgres_user=

#
# path to the password file for connecting to the PostgreSQL server
#
# the file must contain lines of the form:
#   hostname:port:database:username:password
# where:
#   - only the colons are literal; all 5 parts must be substituted with
#     the relevant values
#   - the first 4 values specify a context in which to use the password;
#     they can each be * (for "any"), so usually the file will contain:
#       *:*:*:*:password
#   - by adding a more specific context to each line, a single file can
#     be made to contain multiple passwords for different invocations of the
#     script
#   - any : or \ characters in the values must be preceded by a \
#   - the file must not be group- or world-accessible or it will be ignored;
#     i.e., set it to mode 600
#
# * if blank, PostgreSQL's default will be used (~/.pgpass)
# * if this is unset (as opposed to just blank), it defaults to
#   "/etc/aeolus/postgres.pw"
#
###postgres_pwfile=

#
# [there is no postgres_protocol setting (i.e., it is always ignored)]
#

#
# hostname and port of the PostgreSQL server
#
# to connect via TCP:
#   - specify a hostname (a string not starting with '/')
#   - both "localhost" and "127.0.0.1" will connect via TCP
#   - the port is optional
#
# to connect via socket file:
#   - specify the directory containing the socket in postgres_host; this
#     must start with '/', so it must be an absolute (not relative) path
#   - optionally, specify a port number in postgres_port; this will be used
#     as the suffix of the socket file
#   - the file used will be 'HOST/.s.PGSQL.PORT', where HOST and PORT are
#     the given settings
#   - there is apparently no way to specify the full name of the socket
#     file, or to use anything other than a port number as the suffix
#   - typical socket locations are /tmp/.s.PGSQL.5432 and
#     /var/run/postgresql/.s.PGSQL.5432
#
# * ignored if postgres_usetunnel="yes" (instead, specify the host in
#   postgres_sshhost and the port in postgres_remoteport)
# * if blank or unset, PostgreSQL's defaults will be used
#
###postgres_host=
###postgres_port=

#
# [there is no postgres_socketfile setting (see postgres_host and
# postgres_port instead)]
#

#
# database for initial PostgreSQL connections
#
# PostgreSQL requires a database to connect to even for commands that don't
# use any (such as getting the list of databases)
#
# * for PostgreSQL, ignored unless either postgres_dbmode="all" and
#   postgres_splitdbs="yes", or postgres_dbmode="exclude" (may be different
#   for other DBMSes)
# * if blank or unset, defaults to "postgres"
#
###postgres_connectdb=

#
# [there is no postgres_replstatus setting (yet)]
#

###postgres_dbmode=

#
# list of databases
#
# * can be blank or unset if postgres_dbmode is "include" and
#   postgres_globals is not blank or unset; this allows you to use the
#   script to dump just the globals without any databases
#
###postgres_dblist=()

#
# should we dump the non-database globals separately?
#
# if this is blank or unset, no separate dump is performed; otherwise, this
# setting must contain a string which will be used in place of a database
# name in the name of the dumpfile ("GLOBALS" is suggested)
#
# this dump will be run and named as if postgres_splitdbs is "yes",
# regardless of the value of the setting; pg_dumpall will be used, with the
# options in postgres_dumpglobalsoptions, plus "-g"
#
# if postgres_useaftereach is "yes", postgres_aftereach will be called
# after the dump with the value of this setting as the "database name"
#
# * can be blank or unset
#
###postgres_globals=

###postgres_splitdbs=  # may only be "no" if postgres_dbmode="all"

#
# options to pass to the PostgreSQL client
#
# the client will also be passed
#   -At -c "SELECT datname FROM pg_catalog.pg_database;"
# regardless of this setting, as well as the necessary connection/password
# options
#
###postgres_options=()

#
# options to pass to the pg_dump / pg_dumpall utilities
#
# pg_dumpall is used in two cases:
#
#   - if postgres_dbmode="all" and postgres_splitdbs="no" (which is the
#     default), the main dumps are done with pg_dumpall, using
#     postgres_dumpalloptions
#
#   - if postgres_globals is not blank or unset, the globals dump is done
#     with pg_dumpall, using postgres_dumpglobalsoptions
#
# all other dumps are done with pg_dump, using postgres_dumponeoptions
#
# (postgres_options will NOT be included in any of these cases)
#
# there are several differences in behavior between pg_dump and pg_dumpall
# beyond simply dumping all of the databases at once vs. one database at
# a time:
#
#   - PostgreSQL maintains some information outside of any database,
#     including roles and tablespaces; pg_dumpall includes this information
#     by default, but there is apparently no way to get it using pg_dump
#
#     if you need to dump the databases individually but you also need the
#     global data, use the postgres_globals setting; this allows you to do
#     a separate dump using pg_dumpall with the "-g" option (see above for
#     postgres_globals, below for "-g")
#
#   - pg_dumpall always adds commands to the dump to create and connect to
#     the databases (the equivalent of "-C", see below); this is generally
#     fine for dumping and reloading an entire PostgreSQL installation, but
#     when working with individual databases, it makes it harder to reload
#     a particular database while changing its name (e.g. to make an old
#     version accessible while not destroying a live version)
#
#     this is also why "-C" is not included in the default for
#     postgres_dumponeoptions
#
#   - when using "-c" (see below), pg_dumpall adds commands to the dump to
#     drop all databases before reloading any of them, whereas pg_dump drops
#     all tables before reloading any of them; if you want to drop/reload
#     only one database at a time, you will need to use separate dumps for
#     each database
#
# the only option usually needed for either pg_dump or pg_dumpall is "-c"
# (drop databases/tables/etc. before recreating; see above), but some other
# (potentially) useful options include:
#
# "--lock-wait-timeout=N": N is the maximum number of milliseconds to wait
#                          for a lock to be obtained before dumping
#                          (if exceeded, dump fails)
# "-a": only include the data, not the schema
# "-s": only include the schema, not the data
# "-g": only include global data such as roles and tablespaces, no databases
#       (only applies to postgres_dumpalloptions (see above); see also
#       postgres_globals)
# "-C": add commands to the dump to create and connect to the database (only
#       applies to postgres_dumponeoptions; see above)
# "-x": don't include the permissions with the database(s) (dumps usually
#       include applicable permissions, but not the roles (users)
#       themselves)
# "-O": don't include ownership assignments of tables, etc.
# "--no-tablespaces": don't include tablespace assignments of tables, etc.
# "--inserts": use individual INSERT statements instead of mass COPYs;
#              slower, but more portable and easier to post-process
# "--column-inserts": like "--inserts", but also includes column names
# "--quote-all-identifiers": put all database/table/column/etc. names in
#                            double-quotes (mainly useful for
#                            future-proofing and post-processing)
#
# * must be arrays (see usage notes on the config file)
# * can be empty (e.g., postgres_dumponeoptions=())
# * if these are unset (as opposed to just empty), they default to (-c)
#
###postgres_dumponeoptions=()
###postgres_dumpalloptions=()
###postgres_dumpglobalsoptions=()

#
# [there are no postgres_dumpoptions or postgres_dumpmultoptions settings
# (see, e.g., mysql_dumpoptions)]
#

###postgres_usealtopts=  # defaults to "no"; note that MySQL examples do not
                         # apply here
###postgres_altopts () { }  # no default function for PostgreSQL
###postgres_dumpdir=
###postgres_layout=
###postgres_fileprefix=  # defaults to "postgresdump" if unset (not blank)
###postgres_filesuffix=
###postgres_subdirprefix=  # defaults to "postgresdump" if unset (not blank)
###postgres_filedirsep=
###postgres_filedirdate=
###postgres_numfiles=
###postgres_daysfiles=
###postgres_zipmode=
###postgres_zipoptions=()
###postgres_preserve=
###postgres_on_tunerr=
###postgres_on_replerr=
###postgres_on_listerr=
###postgres_on_nameerr=
###postgres_on_duplerr=
###postgres_on_dumperr=
###postgres_on_ziperr=

#
# [there is no postgres_on_replstat setting]
#

###postgres_useaftereach=
###postgres_aftereach () { }
###postgres_userunbefore=
###postgres_runbefore () { }
###postgres_userunafter=
###postgres_runafter () { }


##########################
#      rsync backups
##########################

#
# are we going to do an rsync backup ("yes" or "no")?
#
# if "no", the rest of the rsync settings are ignored
#
# * ignored if rsync_only is "yes" (and isn't ignored)
# * if blank or unset, defaults to "no"
#
###do_rsync=

#
# only do rsync ("yes" or "no")?
#
# this turns off all other phases of the script (e.g. DBMS dumps) and forces
# do_rsync="yes"; it is intended to be a useful shorthand, used from the
# command line or a wrapper, when restoring files
#
# * ignored if rdb_only is "yes"
# * if blank or unset, defaults to "no"
#
###rsync_only=

#
# mode of operation ("tunnel", "direct", "nodaemon", or "local")
# (see usage notes on rsync modes)
#
# * if blank or unset, defaults to "tunnel"
#
###rsync_mode=

#
# username on the remote SSH host
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, the ssh utility's default will be used (generally
#   the username the script is run by)
#
###rsync_sshuser=

#
# hostname of the remote SSH host
#
# * ignored if rsync_mode is not "tunnel"
#
###rsync_sshhost=

#
# path to the SSH key file
#
# * ignored if rsync_mode is not "tunnel" or "nodaemon"
# * if blank or unset, the ssh utility's default will be used
#
###rsync_sshkeyfile=

#
# SSH port on the remote host
#
# * ignored if rsync_mode is not "tunnel" or "nodaemon"
# * if blank or unset, the ssh utility's default will be used (generally 22)
#
###rsync_sshport=

#
# hostname on the local end of the SSH tunnel
#
# generally "localhost", but may need to be (e.g.) "127.0.0.1" or "::1"
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "localhost"
#
###rsync_localhost=

#
# port number on the local end of the SSH tunnel
#
# can be any valid unused port
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "8873"
#
###rsync_localport=

#
# hostname on the remote end of the SSH tunnel;
# connected to from rsync_sshhost
#
# generally "localhost", but may need to be (e.g.) "127.0.0.1" or "::1"
#
# it can also be something else entirely, for example if the purpose of the
# tunnel is to get through a firewall, but a connection cannot be made
# directly to the necessary server
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "localhost"
#
###rsync_remotehost=

#
# port number on remote end of the SSH tunnel
#
# generally 873
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "873"
#
###rsync_remoteport=

#
# additional options to pass to the SSH client
#
# if rsync_mode="nodaemon", options cannot contain spaces; if you really
# need to pass options with spaces while in "nodaemon" mode, set them in the
# ~/.ssh/config file (possibly with a fake hostname which you then use as
# the host in rsync_source/dest)
#
# * must be an array (see usage notes on the config file)
# * ignored if rsync_mode is not "tunnel" or "nodaemon"
# * can be empty or unset
#
###rsync_sshoptions=()

#
# how long to wait for the SSH tunnel to be established, in seconds
#
# minimum setting allowed is 1 second
#
# * ignored if rsync_mode is not "tunnel"
# * if blank or unset, defaults to "15"
#
###rsync_sshtimeout=

#
# remote rsyncd port
# (see usage notes on rsync modes)
#
# * ignored if rsync_mode is not "direct"
# * if blank or unset, the rsync utility's default will be used (generally
#   873)
#
###rsync_port=

#
# path to the password file (for the remote rsync user)
#
# the file must contain only the password to use
#
# * ignored if rsync_mode is not "tunnel" or "direct"
# * if blank, no password file will be used, and rsync will prompt for a
#   password if the remote host requires one (which can be a problem if,
#   e.g., the script is being run from cron)
# * if this is unset (as opposed to just blank), it defaults to
#   "/etc/aeolus/rsync.pw"
#
###rsync_pwfile=

#
# path to the filter-rules file
#
# suggested location: /etc/aeolus/rsync.filter
#
# one particularly important use: the lockfile should not be transferred
# if it is in the source directories; specifically, it should be hidden
# (meaning not copied, and deleted from the remote host if present)
#
# * can be blank or unset for no file; file can also be empty
#
###rsync_filterfile=

#
# additional options to rsync
#
# typical options for backups: -va --sparse --numeric-ids --delete
#
# some other (potentially) useful options include (taken from the man page,
# with commentary added in parentheses):
#
# -n, --dry-run               perform a trial run with no changes made
# -x, --one-file-system       don't cross filesystem boundaries
#     --size-only             skip files that match in size
#                             (don't check contents)
#     --modify-window=NUM     compare mod-times with reduced accuracy
#                             (1 can be useful for FAT filesystems)
# -h, --human-readable        output numbers in a human-readable format
#     --progress              show progress during transfer
# -H, --hard-links            preserve hard links
#                             (note that this takes a lot of memory)
# -A, --acls                  preserve ACLs
# -X, --xattrs                preserve extended attributes
#
# * must be an array (see usage notes on the config file)
# * can be empty (i.e., rsync_options=())
# * if this is unset (as opposed to just empty), it defaults to
#   (-va --sparse --numeric-ids --delete)
#
###rsync_options=()

#
# source files and/or directories
# (see usage notes on rsync modes)
#
# note that directories ending with / will have their _contents_ transferred,
# while directories not ending with / will be transferred themselves
#
# * must be an array (see usage notes on the config file)
#
###rsync_source=()

#
# destination
# (see usage notes on rsync modes)
#
###rsync_dest=

#
# how to handle warnings and errors
#
# possible options include:
#   "ignore" = silently ignore the error and continue (not recommended)
#   "warn" = send/log a warning, but continue
#   "phase" = warn and abort the rsync sequence, skipping to the next phase
#             of the backup (i.e., rdiff-backup); rsync_runafter is called
#             first, if appropriate
#   "exit" = exit the script with an error; rsync_runafter is not called
#            (see the addexitcallback library function if that is a problem)
# (abbreviated below, but the full names must be used in the settings)
#
# error     | explanation
# -------------------------------------------------
#   tunerr  | error opening SSH tunnel
#   softerr | rsync "errors" that are probably fine
#   harderr | more serious rsync errors
#
# error     | allowed vals | default
# ----------------------------------
#   tunerr  |       ph ex  | "phase"
#   softerr | ig wa ph ex  | "warn"
#   harderr | ig wa ph ex  | "warn"
#
###rsync_on_tunerr=
###rsync_on_softerr=
###rsync_on_harderr=

#
# hooks to run functions before and after rsync backups
#
# this feature allows you to run arbitrary code before and after the rsync
# phase of the script; it is particularly helpful for preventing files from
# changing during the dump by, e.g., locking a code repository
#
# rsync_userunbefore and rsync_userunafter can be "yes" or "no";
# if "yes", you must define a function called rsync_runbefore or
# rsync_runafter, respectively
#
# rsync_runbefore takes no parameters, and can return:
#   0 = success
#   1 = skip the rsync phase (rsync_runafter is called first, if
#       appropriate)
#   2 = abort the script completely (rsync_runafter is not called; see the
#       addexitcallback library function if that is a problem)
#
# rsync_runafter takes one parameter, which can be:
#   0 = rsync phase finished normally
#   1 = rsync phase was aborted
#       the phaseerr variable will contain the exit value that would have
#       been used for the relevant error; see the top of the script for a
#       list
# it can return:
#   0 = success
#   2 = abort the script
#
# your functions can access any of the internal variables of the script;
# it is recommended to study the script and library code, and to use the
# available logging tools
#
# (in particular, if rsync has been run, its return value will be in
# rsyncexit; otherwise, rsyncexit will be unset)
#
# see mysql_aftereach for an example that includes some useful techniques;
# the addexitcallback library function may also be useful in case you need
# to be sure certain things happen even if the rsync_runafter function never
# gets called (e.g., because the script aborts)
#
# * functions are ignored if the respective settings are "no"
# * if blank or unset, settings default to "no"
#
###rsync_userunbefore=
###rsync_runbefore () { }
###rsync_userunafter=
###rsync_runafter () { }


#################################
#      rdiff-backup backups
#################################

#
# are we going to run rdiff-backup ("yes" or "no")?
#
# if "no", the rest of the rdiff-backup settings are ignored
#
# * ignored if rdb_only is "yes"
# * if blank or unset, defaults to "no"
#
###do_rdb=

#
# only do rdb sync ("yes" or "no")?
#
# this turns off all other phases of the script (e.g. DBMS dumps) and forces
# do_rdb="yes" and rdb_prune=""; it is intended to be a useful shorthand,
# used from the command line or a wrapper, when restoring files or running
# rdiff-backup "commands" such as '--list-increment-sizes' or '--verify'
#
# * if blank or unset, defaults to "no"
#
###rdb_only=

#
# mode of operation ("remote" or "local")
#
# in "local" mode, rdb_sshkeyfile, rdb_sshport, and rdb_sshoptions are
# ignored, and rdb_source and rdb_dest may not be on remote hosts
# (/local/path vs. user@host::/remote/path)
#
# in "remote" mode, the ssh options are used, and if neither rdb_source
# nor rdb_dest is on a remote host, rdiff-backup emits a warning
#
# * if blank or unset, defaults to "remote"
#
###rdb_mode=

#
# path to the SSH key file
#
# * ignored if rdb_mode is "local"
# * if blank or unset, the ssh utility's default will be used
#
###rdb_sshkeyfile=

#
# SSH port on the remote host
#
# * ignored if rdb_mode is "local"
# * if blank or unset, the ssh utility's default will be used (generally 22)
#
###rdb_sshport=

#
# additional options to pass to the SSH client
#
# rdiff-backup passes "-C" (compression) by default; if you set
# rdb_sshoptions and you want to retain this option, you have to include it
# in the array
#
# options cannot contain spaces; if you really need to pass options with
# spaces, set them in the ~/.ssh/config file (possibly with a fake hostname
# which you then use as the host in rdb_source/dest)
#
# * must be an array (see usage notes on the config file)
# * ignored if rdb_mode is "local"
# * can be empty (i.e., rdb_sshoptions=())
# * if this is unset (as opposed to just empty), it defaults to (-C)
#
###rdb_sshoptions=()

#
# additional options to rdiff-backup
#
# if you set the --remote-schema option here, and rdb_mode="remote", it
# will override rdb_sshkeyfile, rdb_sshkeyport, and rdb_sshoptions; you will
# have to include the relevant values in the array if you want to use them
#
# * must be an array (see usage notes on the config file)
# * can be empty or unset
#
###rdb_options=()

#
# "command" options to rdiff-backup
#
# this is intended to be used from the command line or a wrapper, to run
# rdiff-backup "commands" like '--list-increment-sizes' or '--verify' on the
# archive; rdb_source generally must be blank or unset for this purpose, and
# rdb_prune should typically be blank or unset as well
#
# * must be an array (see usage notes on the config file)
# * can be empty or unset
#
###rdb_cmdopt=()

#
# source directory
# (see rdb_mode)
#
# * can be blank or unset, in order to run commands on the archive (such as
#   '--list-increment-sizes' or 'verify'; see rdb_cmdopt)
#
###rdb_source=

#
# destination
# (see rdb_mode)
#
###rdb_dest=

#
# how far back should we prune old increments?
#
# if blank or unset, no pruning is done; otherwise, increments older than
# the specified time are removed
#
# examples: 3D = 3 days; 2W = 2 weeks; 1Y = 1 year; 3B = 3 backups ago
#
# see the section on time formats in the rdiff-backup man page for more
# information
#
# * can be blank or unset
#
###rdb_prune=

#
# when should we prune the archive ("before" or "after" the rdiff-backup)?
#
# "before" keeps the total disk space usage during the backup process as low
#          as possible
# "after" preserves the old data longer, especially in case an error
#         prevents us from obtaining new data
#
# * ignored if rdb_prune is blank or unset
# * if blank or unset, defaults to "after"
#
###rdb_pruneorder=

#
# how to handle various errors
#
# possible options include:
#   "ignore" = silently ignore the error and continue (not recommended)
#   "warn" = send/log a warning, but continue
#   "phase" = warn and abort the rdiff-backup sequence, skipping to the next
#             phase of the backup (none implemented yet); rdb_runafter is
#             called first, if appropriate
#   "exit" = exit the script with an error; rdb_runafter is not called
#            (see the addexitcallback library function if that is a problem)
# (abbreviated below, but the full names must be used in the settings)
#
# error      | explanation
# ----------------------------------
#   syncerr  | error syncing files
#   pruneerr | error pruning archive
#
# error      | allowed vals | default
# -----------------------------------
#   syncerr  | ig wa ph ex  | "phase"
#   pruneerr | ig wa ph ex  | "phase"
#
###rdb_on_syncerr=
###rdb_on_pruneerr=

#
# hooks to run functions before and after rdiff-backup backups
#
# this feature allows you to run arbitrary code before and after the
# rdiff-backup phase of the script; it is particularly helpful for
# preventing files from changing during the dump by, e.g., locking a code
# repository
#
# rdb_userunbefore and rdb_userunafter can be "yes" or "no";
# if "yes", you must define a function called rdb_runbefore or
# rdb_runafter, respectively
#
# rdb_runbefore takes no parameters, and can return:
#   0 = success
#   1 = skip the rdiff-backup phase (rdb_runafter is called first, if
#       appropriate)
#   2 = abort the script completely (rdb_runafter is not called; see the
#       addexitcallback library function if that is a problem)
#
# rdb_runafter takes one parameter, which can be:
#   0 = rdiff-backup phase finished normally
#   1 = rdiff-backup phase was aborted
#       the phaseerr variable will contain the exit value that would have
#       been used for the relevant error; see the top of the script for a
#       list
# it can return:
#   0 = success
#   2 = abort the script
#
# your functions can access any of the internal variables of the script;
# it is recommended to study the script and library code, and to use the
# available logging tools
#
# (in particular, if rdiff-backup has been run, its return value will be in
# rdbsyncexit (otherwise, rdbsyncexit will be unset); similarly, the return
# value from the pruning will be in rdbpruneexit if it has been run)
#
# see mysql_aftereach for an example that includes some useful techniques;
# the addexitcallback library function may also be useful in case you need
# to be sure certain things happen even if the rdb_runafter function never
# gets called (e.g., because the script aborts)
#
# * functions are ignored if the respective settings are "no"
# * if blank or unset, settings default to "no"
#
###rdb_userunbefore=
###rdb_runbefore () { }
###rdb_userunafter=
###rdb_runafter () { }
