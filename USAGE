Usage Notes for Aeolus, by Daniel Malament
for license info, run 'aeolus license', or see the LICENSE file
---------------------------------------------------------------

CONTENTS
--------
1) Installation
2) Setup And Permissions
3) Running The Script
4) How To Use The Config File
5) Script Output
6) Database Dumps
7) Rsync Modes
8) Restores and Other Archive Operations
9) Portability


1) Installation
---------------

   a) The Aeolus library, aeolus-lib.sh, must be installed in one of:
        /usr/local/lib
        /usr/lib
        ~/bin
        the directory containing the script

      It will be searched for in that order, or the location can be
      specified in the AEOLUSLIB environment variable.

   b) To install the script system-wide:
        cp aeolus /usr/local/bin/
        chmod 755 /usr/local/bin/aeolus
        chown 0:0 /usr/local/bin/aeolus
        mkdir /etc/aeolus
        chmod 755 /etc/aeolus
        chown 0:0 /etc/aeolus
        cp CONFIG.SAMPLE USAGE /etc/aeolus/
        chmod 644 /etc/aeolus/CONFIG.SAMPLE /etc/aeolus/USAGE
        chown 0:0 /etc/aeolus/CONFIG.SAMPLE /etc/aeolus/USAGE

      To install the script in a user account, use something like:
        mkdir ~/bin
        chmod u=rwx ~/bin
        cp aeolus ~/bin/
        chmod u=rwx ~/bin/aeolus
        mkdir ~/.aeolus
        chmod u=rwx ~/.aeolus
        cp CONFIG.SAMPLE USAGE ~/.aeolus/
        chmod u=rw ~/.aeolus/CONFIG.SAMPLE ~/.aeolus/USAGE

   c) To check whether the system supports the necessary utilities, run:
        aeolus -n systemtest

      This will use the current PATH; alternatively, you may need to put
      a suitable usepath setting in a config file and run:
        aeolus -f aeolus.conf systemtest

      (See the Portability section for more information.)


2) Setup And Permissions
------------------------

   a) Files

      Here are the minimium permissions required for the various files used
      by the script, relative to the user running the script:

      r (read) on the file, and x (execute) on the parent directory:
        [the config file]
        [dbms]_sshkeyfile
        [dbms]_pwfile
        rsync_sshkeyfile
        rsync_pwfile
        rsync_filterfile
        rdb_sshkeyfile

      rw (read/write) on the file, and x (execute) on the parent directory:
        [dbms]_socketfile
        [the dump files]

      rwx (read/write/execute) on the file, and x (execute) on the parent
      directory:
        [dbms]_dumpdir

      w (write) on the file, and wx (write/execute) on the parent directory:
        startedfile
        alertfile
        statuslog

      wx (write/execute) on the file, and wx (write/execute) on the parent
      directory:
        lockfile

      w (write) on the file, and rwx (read/write/execute) on the parent
      directory:
        outputlog

   b) Email

      Make sure the system running the script can successfully send email to
      the account(s) you will be using in mailto; this may involve setting
      it to use a smarthost in some cases.

   c) SSH

      General:

        For any SSH connection you plan to use (i.e. tunnels,
        rsync_mode="nodaemon", or rdb_mode="remote"), you will need:
          * a shell account on the remote host, possibly created for this
            purpose
          * an entry in the known_hosts file for the shell user on the
            local host containing the remote server's public key (see below)
          * a key on the local host, created with a command like:
              ssh-keygen -t dsa -f /etc/aeolus/remotehost
            (it's a good idea to use a separate key for this)
          * an entry in the authorized_keys file for the shell user on the
            remote host containing the public half of the key (see below)

      Known_hosts:

        Before running the script for the first time, the public key for
        each remote host you will be connecting to must be added to the
        known hosts file on the local host (~/.ssh/known_hosts).  This can
        be done in several ways:
          * editing the file directly (i.e., pasting in the public key)
          * running ssh with the same options as in the config file and
            answering "yes"
          * running the script manually and answering "yes", assuming that
            terminal I/O works properly when ssh is run in the background

      Authorized_keys:

        Before running the script for the first time, the public half of
        each key you will be using to connect to a remote host must be added
        to the authorized keys file on that host (~/.ssh/authorized_keys).

        In the case of a tunnel for rsync, the ideal way to add the key is
        to create an entry containing:
          from="LOCALIP",no-agent-forwarding,no-x11-forwarding,no-pty,
          permitopen="localhost:873",command="/usr/sbin/nologin"
        followed by a space and the public key.  The string above should all
        be on one line with no spaces; replace LOCALIP with the local host's
        IP and correct the path to nologin on the remote host if necessary.

        For tunnels for other services, replace the port number in the line
        above; to allow multiple ports, add more permitopen sections.

        For rsync_mode="nodaemon" or rdb_mode="remote", remove the
        permitopen section from the line above, and either remove or replace
        the command section.  For rsync, look into the rrsync script
        provided with the rsync distribution; for rdiff-backup, you can use:
          command="rdiff-backup --server"

   d) MySQL

      You will need a MySQL account with privileges for the databases you
      want to dump.  This can mean setting separate permissions for each
      database, or for all (*.*).  It can also mean giving full permissions
      (ALL PRIVILEGES), or a minimal set of permissions designed to maximize
      security while still allowing backups to be run with no problems.
      For example, try:
        GRANT SHOW DATABASES, SELECT, LOCK TABLES, RELOAD, SHOW VIEW
        ON *.* ...
      (if using --master-data, add REPLICATION CLIENT).

   e) PostgreSQL

      You will need a PostgreSQL account with privileges for the databases
      you want to dump.  This may mean needing superuser privileges,
      especially in the case of pg_dumpall, which is used when
      postgres_dbmode="all" and postgres_splitdbs="no".  Pg_dumpall not only
      needs to access the databases, but to access global data which is not
      stored in a database (e.g., roles and tablespaces; see
      postgres_dumpalloptions in the CONFIG.SAMPLE file for more
      information).

      Further, from the pg_dumpall man page:
          Also you will need superuser privileges to execute the saved
          script in order to be allowed to add users and groups, and to
          create databases.

   f) rsync

      For rsync_mode="tunnel" or "direct", you will need to configure rsyncd
      on the remote host.  Here is a sample rsyncd.conf for tunnel mode,
      pulling from the remote host:

        # use ssh tunnel for encryption, and only allow connections
        # from localhost
        address = 127.0.0.1

        [backup]
        path = /
        use chroot = yes
        numeric ids = yes
        # munging not necessary because inside-chroot path is /
        munge symlinks = no
        max connections = 1
        log file = /var/log/rsyncd/backup.log
        read only = no
        write only = no
        list = no
        uid = 0
        gid = 0
        #fake super = yes
        filter = - /rsyncd-munged/
        auth users = backup
        secrets file = /etc/rsyncd/backup.pw
        strict modes = yes
        # use ssh tunnel for encryption
        hosts allow = 127.0.0.1

      This will of course require adjustments for your specific application
      and for other transfer modes.  In particular:
        * the 'address' line at the top only works if all rsync connections
          are via SSH tunnel
        * some settings, such as 'use chroot', are not really useful in this
          example, but are there as reminders should you use a different
          setup
        * max connections can be set higher or omitted, but using a value
          of 1 may be helpful if you wish to avoid having multiple backups,
          or both backups and restores, running at the same time
        * 'read only = no' allows restores without changing any
          configuration; for greater security you can set 'read only = yes'
          and change it when necessary
        * 'uid'/'gid' must be 0 to copy the entire server, but if your
          application allows, using (or creating) a separate account with
          fewer privileges is more secure
        * 'fake super' is helpful when the server is not running as root
          (i.e., 'uid'/'gid' are not 0); it is also available as an option
          to rsync for the local side (--fake-super)
          however, it requires turning on extended attributes on the
          filesystem to which the data is being copied (e.g., mount with
          user_xattr on Linux)
        * the names in the 'auth users' line refer to lines in the 'secrets
          file'; each line in this file has the format:
            username:password
          and the file must not be world-readable

      Note that rsyncd.conf is re-read on each connection, so changes do not
      require restarting rsyncd.


3) Running The Script
---------------------

   a) For invocation details, including available modes, run 'aeolus usage'.
      This includes modes to print various diagnostics, (un)silence alerts,
      disable/enable backups, create config file templates, etc.

      It also shows how to override the config file by specifying settings
      on the command line.

   b) The script is designed to be run fairly frequently from cron (e.g.,
      every hour) and to determine for itself when to actually perform
      dumps/rsyncs/etc.; this is so that backups will be eventually be done
      even on systems that aren't always on.  Alternatively, the script can
      be set to simply perform a backup every time it's invoked; see
      runevery in the CONFIG.SAMPLE file for more information.

   c) It's a good idea to run the script manually the first time, with
      quiet="no", especially on a new system; this will help catch
      incompatibilities and errors in the config settings.

   d) Phases of the script (DBMSes, rsync, rdiff-backup) take place in the
      order in which their settings are listed in the CONFIG.SAMPLE file.


4) How To Use The Config File
-----------------------------

   a) The config file is a shell script; setting lines are in one of two
      formats, regular variables:
        variable=value
      or arrays:
        variable=(value1 value2 etc.)
      No spaces are allowed around the =; extra spaces are ignored within
      the parentheses.  The notes in the CONFIG.SAMPLE file indicate which
      settings are arrays, and the 'create' mode will include parentheses
      on the appropriate lines.

      Values containing whitespace or certain characters, including:
        " # $ & ' ( ) * ; < = > ? [ \ ` |
      must be enclosed in single- or double-quotes.  This includes
      individual values in arrays.

      Double-quotes can be included in a double-quoted value by preceding
      them with \ (i.e., " becomes \"), but single-quotes cannot be included
      in a single-quoted value (there are other differences between the two
      types of quotes; see the bash documentation).

      To leave a regular setting blank, omit the value entirely:
        variable=
      or use an empty string ('' or ""):
        variable=''
      This is not the same as leaving the variable unset (i.e., not setting
      it at all); these two cases are treated differently for some settings.
      See the CONFIG.SAMPLE file for more information.

      To leave an array empty, define it with no elements:
        variable=()
      As with regular settings, this is treated differently from an unset
      variable in some cases.

   b) The usage of some settings requires the definition of shell functions;
      see the CONFIG.SAMPLE file for examples, and the bash documentation
      for further assistance.

   c) Comments beginning with # are allowed on their own lines or after
      values.

   d) Values that require file paths will be interpreted relative to the
      current working directory if not specified as absolute paths
      (i.e., beginning with /).

   e) Paths can contain spaces (if quoted), but whitespace and symbols
      should be avoided if possible, as they may break the script (although
      an effort has been made to prevent this).  The symbols listed in (a)
      are particularly likely to cause problems.

   f) Additional files can be included using '.':
        . /etc/aeolus/aeolus.conf.more

      Relative paths are allowed, but they may have to be specified
      explicitly:
        . ./aeolus.conf.more
      and they will be interpreted relative to the current working
      directory, not the location of the config file.


5) Script Output
----------------

   The script offers many forms of output and logging, most of which can be
   turned off or configured.  Not every option is mentioned here; see the
   CONFIG.SAMPLE file for more information.

   a) Printing To stdout And stderr (Standard Output / Error Output)

      If quiet="yes", the script does not intentionally print anything,
      leaving only the really unusual errors (e.g., shell parsing errors,
      SSH tunnel "can't bind to port", etc.).  This is the recommended
      mode for "silent running" of the script.

      If quiet="no", the script prints everything that is logged, any output
      generated by ssh, database, rsync, rdiff-backup, or other commands,
      and any shell errors.  Note that any output which is copied to the
      output logs (see (d)) is printed on stdout, even if the original
      commands printed it on stderr.

   b) Syslog

      Syslog is useful to keep multiple simultaneous instances of the script
      from potentially garbling each others' output in a shared log; it also
      can be configured to send logs to a remote system for centralization.

      However, it can also be a security weakness, since logs are often
      world-readable, remotely copied without encryption, etc.  Note that
      settings may include things like paths to password/key files, and
      any settings supplied on the command line will be logged.  Therefore,
      you should consider putting settings containing sensitive information
      in a config file.

      If usesyslog="no", it is a good idea to preserve the script's output
      in another way, e.g.:
        * have cron email the script's output (see (a))
        * run the script with something like:
            > "aeolus-out.$(date "+%s")" 2>&1
        * use the status log (see (c))

   c) The Status Log

      This file contains a copy of all intentional script output, including
      syslogged messages, except for what goes in the output logs.  This
      means, for example, that no shell parsing errors or SSH tunnel errors
      are included in the status log; the former are unintentional, and the
      latter are part of the output logs.  (See (d) for more on the output
      logs.)

      Lines are preceded with a timestamp and the PID of the script process.

      Note that every invocation of the script with the same config file (*)
      will send output to the same status log; when multiple invocations are
      running at once, lines will be intermingled at best, and garbled at
      worst, depending on how the individual system works.  If your system
      garbles the log, it is recommended to rely on syslog instead.

      (*) or more generally, the same value of the statuslog setting

      This file will not be rotated by the script, only appended to.

   d) Output Logs

      These contain the printed output (*) from the ssh command, the
      database commands, rsync, and rdiff-backup, and are rotated by the
      script.  See numlogs and dayslogs in the CONFIG.SAMPLE file for
      rotation options.

      (*) stdout and/or stderr, depending on the command

   e) Email

      Notification of all alerts and errors caught by the script is sent by
      email, including diagnostics (the configuration settings and the
      timestamps of certain files).  Uncaught errors are not included; for
      example, this does not include shell parsing errors (see (a)).

   f) Return Value

      The script returns non-0 to indicate an error; see the top of the
      script for more information.


6) Database Dumps
-----------------

   a) For technical reasons, databases with names containing / or newline
      characters will not be dumped when [dbms]_splitdbs=yes.  (This also
      applies to the string in [dbms]_globals.)  See mysql_on_nameerr in the
      CONFIG.SAMPLE file for more information.


7) Rsync Modes
--------------

   There are four main ways to use rsync (see the man page for more info):

   a) Over An SSH Tunnel To A Remote rsync Daemon

      This is the most secure way to connect to a remote host; while the
      rsync protocol does have (weak) encryption of logins, it has none for
      the actual data.  This mode also allows for fine-grained access
      control on the remote end via rsyncd.conf.

      For this mode:
        * rsync_mode="tunnel"
        * all of the ssh options apply
        * rsync_port is ignored
        * the rest of the rsync options apply

      Source and destination are specified as follows:
        * if pushing to a remote host:
            rsync_source=("local files" "and/or directories")
            rsync_dest="user@localhost::remotepath" [note two colons]
        * if pulling from a remote host:
            rsync_source=("user@localhost::remotepath") [note two colons]
            rsync_dest="local path"
      where:
        * 'user' is a username specified in the remote rsyncd.conf
        * 'localhost' should be used literally (but without the single
          quotes)

   b) Directly To A Remote rsync Daemon

      This is the least secure way to connect to a remote host in that only
      the login is encrypted; on the other hand, you still get the control
      of rsyncd.conf.

      For this mode:
        * rsync_mode="direct"
        * all of the ssh options are ignored
        * all of the other rsync options apply, including rsync_port

      Source and destination are specified as follows:
        * if pushing to a remote host:
            rsync_source=("local files" "and/or directories")
            rsync_dest="user@remotehost::remotepath" [note two colons]
        * if pulling from a remote host:
            rsync_source=("user@remotehost::remotepath") [note two colons]
            rsync_dest="local path"
      where:
        * 'user' is a username specified in the remote rsyncd.conf

   c) Via SSH To A Remote Host Without An rsync Daemon

      This mode removes the flexibility of rsyncd.conf, but the login and
      data are both encrypted; the biggest drawback is that access to files
      owned by multiple users requires a root login.  This problem can be
      mitigated, however, by limiting the key in the remote authorized_keys
      file, at the possible cost of having fixed rsync settings.  See the
      Setup section, above, for a similar modification, and the rrsync
      script that comes with the rsync distribution.

      For this mode:
        * rsync_mode="nodaemon"
        * rsync_sshuser, rsync_sshhost, rsync_localhost, rsync_localport,
          rsync_remotehost, rsync_remoteport, and rsync_sshtimeout are
          ignored (user/host must be included in rsync_source/rsync_dest;
          see below)
        * rsync_sshkeyfile, rsync_sshport, and rsync_sshoptions apply
        * rsync_port and rsync_pwfile are ignored
        * if rsync_options includes -e, you must manually include
          the SSH key, port, and options
        * the rest of the rsync options apply

      Source and destination are specified as follows:
        * if pushing to a remote host:
            rsync_source=("local files" "and/or directories")
            rsync_dest="user@remotehost:remotepath" [note one colon]
        * if pulling from a remote host:
            rsync_source=("user@remotehost:remotepath") [note one colon]
            rsync_dest="local path"
      where:
        * 'user' is a shell user on the remote host

   d) Between Locations On The Local Host

      This is a more efficient and flexible way to copy/sync files than cp
      or tar.

      For this mode:
        * rsync_mode="local"
        * all of the ssh options are ignored
        * rsync_port and rsync_pwfile are ignored
        * the rest of the rsync options apply

      Source and destination are specified as follows:
        * rsync_source=("local files" "and/or directories")
        * rsync_dest="local path"


8) Restores and Other Archive Operations
----------------------------------------

   a) The best way to restore files is to use the same config file as the
      backups, and add or override some options on the command line or in
      a wrapper.  This will, in addition to providing convenience and
      logging, use the same lockfile as the backups, preventing backups and
      restores from interfering with each other.

      For rsync:
        * set rsync_only="yes"
        * set rsync_source and rsync_dest

      For rdiff-backup (both restores, and "commands" like
      '--list-increment-sizes' or '--verify'):
        * set rdb_only="yes"
        * set rdb_cmdopt
        * set rdb_source="" (in most cases)


9) Portability
--------------

   a) The script must be run with bash version 3.1 or later, and assumes
      bash is located in /bin.  If you don't have (or don't want to use)
      /bin/bash, you can run the script with:
        /path/to/bash /path/to/aeolus
      or modify the first line of the script to point to your bash binary.

   b) The script uses these utilities:
        awk, bzip2, cat, date, expr, find, gawk, grep, gzip, hostname,
        logger, ls, lzip, mailx, mkdir, mkfifo, mv, mysql, mysqldump, nc,
        pg_dump, pg_dumpall, pigz, psql, rdiff-backup, rm, rsync, sed,
        sleep, sort, ssh, tee, touch, tr, xz

   c) Some of the above are optional, depending on the settings used.  In
      the list below, [dbms] means any DBMS, but the same one throughout any
      given example.

        awk and gawk are only needed if runevery and/or ifrunning is not 0,
        and timecomptype="awk" or "gawk", respectively

        bzip2: see gzip

        expr is only needed if one of the following is true:
          * the script is run in 'systemtest' mode
          * runevery and/or ifrunning is not 0, and timecomptype="date-r"
          * outputlog is not null and outputlog_layout="number"
          * outputlog is not null, outputlog_layout="date", and dayslogs
            is not 0
          * [dbms]_dodump="yes" and [dbms]_layout="number" or "numberdir"
          * [dbms]_dodump="yes", [dbms]_layout="date" or "datedir", and
            [dbms]_daysfiles is not 0
          * [dbms]_dodump="yes" and [dbms]_usetunnel="yes"
          * do_rsync="yes" and rsync_mode="tunnel"

        find is only needed if one of the following is true:
          * runevery and/or ifrunning is not 0, and timecomptype is one of
            "find", "date-d", "awk", or "gawk"
          * outputlog is not null, outputlog_layout is not "append", and
            dayslogs is not 0
          * [dbms]_dodump="yes", [dbms]_layout is not "single" or
            "singledir", and [dbms]_daysfiles is not 0

        gawk: see awk

        gzip, pigz, bzip2, lzip, and xz are only needed if
        [dbms]_dodump="yes" and [dbms]_zipmode="gzip", "pigz", "bzip2",
        "lzip", or "xz", respectively

        hostname is not strictly necessary, but it will be used if
        available (to set defaults)

        logger is only needed if usesyslog="yes"

        lzip: see gzip

        mailx is only needed if suppressemail="no"

        mv is only needed if one of the following is true:
          * outputlog is not null and outputlog_layout="number"
          * [dbms]_dodump="yes" and [dbms]_layout="number" or "numberdir"
          * [dbms]_dodump="yes" and [dbms]_preserve="data"

        mysql is only needed if mysql_dodump="yes" and either
        mysql_dbmode="all" and mysql_splitdbs="yes", or
        mysql_dbmode="exclude"

        mysqldump is only needed if mysql_dodump="yes"

        nc and sleep are only needed if one of the following is true:
          * [dbms]_dodump="yes" and [dbms]_usetunnel="yes"
          * do_rsync="yes" and rsync_mode="tunnel"

        pg_dump is only needed if postgres_dodump="yes" and either
        postgres_dbmode is not "all", or postgres_dbmode="all" and
        postgres_splitdbs="yes"

        pg_dumpall is only needed if postgres_dodump="yes",
        postgres_dbmode="all", and postgres_splitdbs="no"

        pigz: see gzip

        psql is only needed if postgres_dodump="yes" and either
        postgres_dbmode="all" and postgres_splitdbs="yes", or
        postgres_dbmode="exclude"

        rdiff-backup is only needed if do_rdb="yes"

        rsync is only needed if do_rsync="yes"

        sleep: see nc

        ssh is only needed if one of the following is true:
          * [dbms]_dodump="yes" and [dbms]_usetunnel="yes"
          * do_rsync="yes" and rsync_mode="tunnel" or "nodaemon"
          * do_rdb="yes" and rdb_mode="remote"

        tee is only needed if quiet="no" and outputlog is not null

        xz: see gzip

   d) Some utilities must support particular options, e.g.:
        * see the timecomptype setting in the CONFIG.SAMPLE file for more
          specific requirements for awk/gawk, find and date, depending on
          the value of that setting
        * nc must accept -z
        * sed must accept any character as a delimiter for substitutions
