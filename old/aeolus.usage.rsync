usage notes for backup.sh by Daniel Malament
--------------------------------------------

1) running the script:
----------------------

(see also "installation", below)

   a) parameters:
      backup.sh /path/to/configfile [mode]
      * if the config file path is omitted, the script looks for a file named
        backup.conf in the current working directory
      * to override settings from the config file, do e.g.:
        rsyncmode="local" source="file1 file2 dir3" backup.sh
      * all settings can be specified on the command line; if "-" (without
        the quotes) is used as the config file path, no config file will
        be loaded
      * modes (from the script's usage message):

        ---
If the mode is "help" or "usage", this message is printed.

If the mode is "cmds", the ssh and rsync commands that would be run are
printed, but nothing else is done.

If the mode is "silence", then alerts about the lockfile existing will be
silenced until either they are unsilenced, or the lockfile is no longer
present.

If the mode is "unsilence", then alerts about the lockfile existing will be
re-enabled.

If the mode is "stop" or "disable", then backups will be disabled until
"start" or "enable" is used.

If the mode is "start" or "enable", then backups will be re-enabled.

If the mode is "clearlock" or "unlock", then the lockfile will be removed.
Only use this if you're sure a backup isn't currently running!
        ---

   b) this script is designed to be run fairly frequently from cron
      (e.g. every hour) and to determine for itself when to run a backup;
      this is so that backups will be eventually be run even on systems
      that aren't always on

   c) before running the script for the first time in tunnel or nodaemon
      modes (see below), the host key for the remote server must be added
      to the known hosts file on the local host; this can be done manually,
      by running ssh with the same options as in the config file and
      answering "yes", or by running the script manually (see (d)) and
      answering "yes"

   d) it's a good idea to run the script manually the first time, with
      quiet="no", especially on a new system; this will help catch
      incompatibilities and errors in the config settings

   e) the best way to restore files is to use the same config file as the
      backup, and specify source and dest on the command line; this will,
      among other things, use the same lockfile as the backups, preventing
      backups and restores from interfering with each other


2) backup modes:
----------------

   There are four main ways to use rsync (see the man page for more info):

   a) over an ssh tunnel to a remote rsync daemon
      this is the most secure way to connect to an remote server;
      while rsync does have (weak) encryption of login info, it has none
      for the actual data, so the ssh tunnel compensates for this, and
      this mode also allows for fine-grained access control on the remote
      end via rsyncd.conf
      for this mode:
          * rsyncmode="tunnel"
          * all of the ssh options apply
          * rsyncdport is ignored
          * the rest of the rsync options apply;
            if pushing to a remote server:
              source="local files and/or directories"
              dest="user@localhost::remotepath" (note two colons)
            if pulling from a remote server:
              source="user@localhost::remotepath" (note two colons)
              dest="localpath"
          (note that 'user' here is a username specified in the remote
           rsyncd.conf; 'localhost' is because of the tunnel, and should
           be used literally (but without the single quotes))

   b) directly to a remote rsync daemon
      this is the least secure way to connect to a remote server in that
      only the login info is encrypted; on the other hand, you still get
      the control of rsyncd.conf
      for this mode:
          * rsyncmode="direct"
          * all of the ssh options are ignored
          * rsyncdport applies
          * the rest of the rsync options apply;
            see above for source and dest formats

   c) via ssh to a remote server without an rsync daemon
      this mode removes the flexibility of rsyncd.conf, but the data is
      completely encrypted; the biggest drawback is that access to files
      owned by multiple users requires a root shell login
      (however, the method described under sshkey, below, can be modified
      to mitigate this problem at the cost of having fixed rsync settings)
      for this mode:
          * rsyncmode="nodaemon"
          * sshlogin, localport, and remoteport are ignored
            (sshlogin is merged into source/dest)
          * sshkey and sshport apply
          * rsyncdport and passwordfile are ignored
          * if rsyncoptions includes -e, you must manually include
            the sshkey and port
          * the rest of the rsync options apply;
            if pushing to a remote server:
              source="local files and/or directories"
              dest="user@remotehost:remotepath" (note one colon)
            if pulling from a remote server:
              source="user@remotehost:remotepath" (note one colon)
              dest="localpath"
          (note that 'user' here is a shell user on the remote host)

   d) between locations on the local host
      this is a more efficient and more flexible way to copy/sync files
      than cp or tar
      for this mode:
          * rsyncmode="local"
          * all of the ssh options are ignored
          * rsyncdport and passwordfile are ignored
          * the rest of the rsync options apply;
            source="local files and/or directories"
            dest="localpath"


3) script output:
-----------------

   a) printing to stdout (standard output) and stderr
      if quiet="no", this includes copies of everything that is logged
          to syslog (if usesyslog="yes") or the backup log, any output
          generated by ssh, rsync, or other commands, and any shell errors;
          note that syslog and rsync messages/output are printed only
          to stdout, not stderr
      if quiet="yes", the script does not intentionally print anything,
          leaving only the really unusual errors (e.g. shell parsing errors,
          ssh tunnel "can't bind to port", etc.); this is the recommended
          mode for "silent running" of the script

   b) syslog
      note that syslog is useful to keep multiple simultaneous instances of
      the script from potentially garbling each others' output in a shared
      log; it also can be configured to send logs to a remote system for
      centralization
      however, it can also be a security weakness, since logs are often
      world-readable, remotely copied without encryption, etc., so:
        * we'll only log the actual commands that are run (which probably
          include things like paths to password/key files) if usesyslog="all"
        * note that settings supplied on the command line will be logged even
          if usesyslog="yes"; put them in a config file instead if they
          contain sensitive information
      if usesyslog="no", it is a good idea to either:
          * have cron email the script's output
      or
          * run the script with something like:
              > backup-output.`date "+%s"` 2>&1
      alternatively, see (c)

   c) the status log
      this optional file contains a copy of all intentional script output
      (including syslogged messages) except what goes in the backup logs
      (meaning, e.g., no shell parsing errors or ssh tunnel errors)
      note that every invocation of the script with the same config file will
      send output to the same status log; when multiple invocations are
      running at once, lines will be intermingled at best, and garbled at
      worst, depending on how the individual system works; lines will be
      preceded with a timestamp and the PID of the script process, to
      improve clarity
      this file will not be rotated by the script

   d) backup logs
      these contain the output (stdout and stderr) from rsync, and are
      rotated by the script (see numlogs and dayslogs)

   e) email
      this includes alerts and errors sent to syslog, but also includes
      diagnostics (the configuration settings and the timestamps of
      certain files)
      it won't catch things like shell parsing errors (see (a)), but it
      will tell you when something more ordinary breaks, without you
      having to read zillions of logs or cron emails;
      however, if you really need to shut it off, you can set
      suppressemail="yes"

   f) a return value, for shell scripting
      see the top of the script for possible return values


4) portability:
---------------

   the script uses (at least) the following:
     awk/gawk, cat, date, expr, find, grep, hostname, logger, ls, mailx,
     mkdir, mkfifo, mv, nc, pwd, rm, rsync, sed, ssh, tee, touch
   and these, which are usually built into the shell:
     echo, kill, sleep, [
   some of the above are optional, depending on the settings used:
     awk/gawk is only needed if timechecktype="awk" or "gawk"
     find is only needed if timechecktype is one of "find", "date-d", "awk",
       or "gawk", or dayslogs is not 0
     (see the timechecktype setting for more specific requirements for
       awk/gawk, find and date)
     logger is only needed if usesyslog="yes"
     tee is only needed if quiet="no" and backuplog is not null
     cat is needed _unless_ quiet="no" and backuplog is not null
     mailx is only needed if suppressemail="no"
     hostname is only needed if suppressemail="no" and subject is not set
     mv is only needed if backuplog is not null
     kill, nc, and sleep are only needed if rsyncmode="tunnel"
     ssh is only needed if mode="tunnel" or "nodaemon"
     expr is only needed if timechecktype="date-r", or rsyncmode="tunnel",
       or backuplog is not null


5) how to use the config file:
------------------------------

   a) the config file is a shell script; lines are in the format:
          variable="value"
      with no spaces allowed around the =
      (values containing whitespace or certain characters, including
      " # $ & ' ( ) * ; < = > ? [ \ ` |
      must be in quotes, while others can technically be specified
      without them; to include a double-quote in a double-quoted value,
      precede it with \ (i.e. " becomes \"))

   b) comments beginning with # are allowed on their own lines or after
      values

   c) values that require file paths will be interpreted relative to the
      current working directory if not specified as absolute paths
      (i.e. beginning with /)

   d) paths can contain spaces (if quoted), but whitespace and symbols
      (especially any of the ones listed above) should be avoided if
      possible, as they may break things


6) "installation":
------------------

for reference, setup required to use the script:

mail config
ssh key, both ends
rsyncd.conf
rsync password
