######################################################
# configuration file for backup.sh by Daniel Malament
######################################################


###############
# housekeeping
###############

# search path for executables
# see script usage note on portability
# typical safe value:
#   usepath="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
# can be blank, for the default
usepath="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"

# in order to have a non-0 runevery or ifrunning (see below), your system
# must support one of:
# "find": find . -mmin +N
# "date-r": date -r fileref +%s
# "date-d": date -d "N minutes ago" "+%Y%m%d%H%M.%S"
# "awk"/"gawk": awk/gawk with strftime() and systime()
# the last two also require touch -t timestamp and find . -newer fileref,
# but those should usually be the case
timechecktype="find"

# umask value
# generally 077 (more secure, but less accessible)
# or 022 (more accessible, but less secure; not necessarily a good idea)
# can be blank, for the default (but 077 is strongly recommended)
useumask="077"

# debug the script ("yes" or "no")?
# currently, turns on shell tracing (set -x)
debugme="no"


#####################
# checks and logging
#####################

# how often to actually run a backup, in minutes;
# if this amount of time has passed since the last backup started
# (see startedfile, below), the script will continue
# OR: if runevery="0", no check will be performed, and a backup
# will be attemped every time the script is run
runevery="720"  # 12 hours

# path to the backup-started timestamp file
# (updated when a backup actually starts)
startedfile="backup.started"

# if the script has passed the runevery check, but the previous backup
# is still running or was interrupted (i.e. the lockfile is still present):
# * it will send an alert to the mailto address(es)
# * if this continues to be the case, it will send further alerts every
#     ifrunning minutes (unless ifrunning="0", or the alerts are silenced
#     (see script usage note on parameters, or run
#     "backup.sh - usage"))
# * either way, it will send an alert when it next successfully starts,
#     so you know that e.g. the previous backup finally finished, and
#     the next one has begun
ifrunning="120"  # 2 hours

# path to the lock file (actually a directory for technical reasons,
# and since we have it, we can put temp files in it...)
lockfile="backup.lock"

# suppress email ("yes" or "no")?
# see script usage note on output
suppressemail="no"

# where to send alerts and errors (one or more email addresses,
# separated by spaces)
mailto="danielm@bluetiger.net"

# subject line of alert/error emails
# if blank, "backup alert on HOSTNAME" will be used,
# where HOSTNAME is the name of the local host
subject="backup alert on `hostname`"

# path to the alert-timestamp file (used to track ifrunning)
alertfile="backup.alert"

# path to the backup log (blank for none);
# this gets a copy of the output of ssh, the DB commands, and rsync, plus
# a few timestamps and diagnostics
# if backuplog_layout="date", this will have backuplog_sep and a date string
# appended to it (see backuplog_date)
# backup logs may be gzipped or bzipped in place without disrupting
# the script
backuplog="backup.log"

# the file layout to use for the backup logs
# "append": append to a single file, with no rotation
# "number": log to numbered files (lower number = more recent, most recent
#           has no number)
# "date": log to date-suffixed files (see backuplog_date)
# for example, if backuplog="backup.log", backuplog_layout="number", and
#   backuplog_sep=".", the files will be named like "backup.log.1"
# ignored if backuplog is blank
backuplog_layout="number"

# separator to use before number/date suffixes in backup log names
# can be more than one character, or blank
# ignored if backuplog is blank or backuplog_layout="append"
backuplog_sep="."

# format string for the 'date' utility, for backup log names
# can be blank, but that's not recommended because it introduces spaces
# and other punctuation; better is something like "+%Y%m%d"
# (or "+%Y%m%d%H" if backups are run more than once a day); your 'date'
# must support whatever string you use
# dates refer to when the script starts; all files created during a given
# run of the script will have the same date suffix
# (or as close as possible; 'date' has to be run separately for e.g.
# backup logs and MySQL dumps)
# ignored if backuplog is blank or backuplog_layout is not "date"
backuplog_date="+%Y%m%d"

# number of logs to keep, including the current one (0=unlimited)
# ignored if backuplog is blank or backuplog_layout="append"
# note that dayslogs will also be applied
numlogs="5"

# days worth of logs to keep, including the current one (0=unlimited)
# logs older than this many days are removed, first rounding _down_
# to the nearest day
# ignored if backuplog is blank or backuplog_layout="append"
# note that numlogs will also be applied
dayslogs="0"

# use syslog ("all", "yes" or "no")?
# "all" includes the actual SSH/rsync commands that are run
# see script usage note on output
usesyslog="yes"

# syslog priority to use for status messages
# "daemon.info" is recommended, but can be blank for the default
syslogstat="daemon.info"

# syslog priority to use for alerts/errors
# "daemon.err" is recommended, but can be blank for the default
syslogerr="daemon.err"

# syslog tag to use for status and alert/error messages
# can be blank for the default
syslogtag="backup"

# print to stdout/stderr ("yes" or "no")?
# see script usage note on output
quiet="no"

# path to the status log (blank for none); gets a copy of all intentional
# script output except what goes in the backup log
# see script usage note on output
statuslog="backup.status"


################################
# SSH settings for rsync tunnel
################################

# username on the remote server
# if blank, the SSH default will be used (generally the username the
# script is run by)
rsync_sshuser="zephyr"

# hostname of the remote server
rsync_sshhost="aeolus"

# path to the SSH key
# note: for security, use a separate key and prepend something like:
# from="LOCALIP",no-agent-forwarding,no-x11-forwarding,no-pty,permitopen="localhost:873",command="/usr/sbin/nologin"
# (with LOCALIP replaced by the local machine's IP), followed by a space,
# to the line in the authorized_keys file on the remote server
# can be left blank for the default
rsync_sshkey=
#rsync_sshkey="/home/Daniel/.ssh/rsync-rsa"

# SSH port on the remote server (usually 22)
# if blank, defaults to 22
rsync_sshport="22"

# local end of the tunnel (port number, can be any valid unused port)
# if blank, defaults to 8873
rsync_localport="8873"

# remote end of the tunnel (port number, usually 873)
# if blank, defaults to 873
rsync_remoteport="873"

# additional options to pass to the SSH client
# can be blank
rsync_sshoptions=""

# how long to wait for the SSH tunnel to be established, in seconds
# minimum 1 second; if blank, defaults to 15 seconds
rsync_sshtimeout="15"


#################
# rsync settings
#################

# are we going to do an rsync backup ("yes" or "no")?
do_rsync="yes"

# mode of operation ("tunnel", "direct", "nodaemon", or "local")
# see script usage note on backup modes
rsyncmode="tunnel"

# source files and/or directories, separated by spaces
# if any filenames contain spaces, those filenames must be
# enclosed in \"
# note that directories ending with / will have their _contents_ transferred,
# while directories not ending with / will be transferred themselves
# see also script usage note on backup modes
source="\"/c/Documents and Settings/Daniel\" /d/ /e/"

# destination; see script usage note on backup modes
dest="Daniel@localhost::zephyr"

# remote rsyncd port; see script usage note on backup modes
# if blank, defaults to 873
rsyncdport="873"

# path to the password file (for the remote rsync user)
passwordfile="backup.pw"

# path to the optional filter-rules file (blank = no file; file can also
# be empty)
# note that the lockfile should not be transferred if it is in the source
# directories; specifically, it should be hidden (meaning not copied, and
# deleted from the remote server if present)
filterfile="backup.filter"

# additional options to rsync
# can be blank; typically "-va --sparse --numeric-ids --delete"
# any options containing spaces must be enclosed in \"
# note that -H (to preserve hard links) takes a lot of memory
rsyncoptions="-va --sparse --numeric-ids --delete"

# yet more options to rsync
# mostly useful to pass options from the command line while leaving the ones
# in the config file alone
# can be blank
rsyncadd=""


############################################
# MySQL dump settings, including SSH tunnel
############################################

# are we going to do a MySQL dump ("yes" or "no")?
mysql_dodump="yes"

# MySQL SSH tunnel settings (see rsync SSH tunnel for descriptions)
# usually the databases are dumped on the actual database server, but
# sometimes they have to be dumped remotely; using an SSH tunnel will
# slow the process down, but increase security
# (MySQL does have SSL support, but it's not directly supported by this
# script; see mysql_clientopt and mysql_dumpopt)
mysql_usetunnel="no"  # "yes" or "no"
mysql_sshuser="zephyr"
mysql_sshhost="aeolus"
mysql_sshkey=
mysql_sshport="22"
mysql_localport="4306"  # defaults to 4306
mysql_remoteport="3306"  # defaults to 3306 (the usual port)
mysql_sshoptions=
mysql_sshtimeout="15"

# MySQL username; if blank, the MySQL default will be used (generally the
# system user the script is run by)
mysql_user=root

# path to the password file for connecting to the MySQL server
# the file must contain:
#   [client]
#   password="PASSWORD"
# where PASSWORD is the password to use (everything else is literal)
# if blank, the MySQL default will be used (generally no password)
mysql_pwfile=my.pw

# protocol for connecting to the MySQL server (e.g. "tcp", "socket", "pipe")
# usually doesn't need to be specified (can be blank); see the MySQL
# documentation for more info, and mysql_socket, below
# specifying mysql_host, mysql_port, and/or mysql_socket may cause errors
# depending on the value of this setting (e.g. "tcp" is incompatible with
# mysql_socket)
# ignored if mysql_usetunnel="yes"
mysql_protocol=

# hostname of the MySQL server, in case you need to remotely dump databases
# if blank, the MySQL default will be used (generally localhost)
# ignored if mysql_usetunnel="yes" (specify the host in mysql_sshhost
# instead in that case)
mysql_host=

# port for connecting to the MySQL server
# ignored if mysql_usetunnel="yes"
# if blank, the MySQL default will be used (generally 3306)
mysql_port=

# socket path for connecting to the MySQL server (typically /tmp/mysql.sock
# or /var/run/mysqld/mysqld.sock)
# ignored if mysql_usetunnel="yes", mysql_host is specified, or mysql_port
# is specified
# if mysql_protocol="pipe", this is the path to the pipe
# if blank, the MySQL default will be used
mysql_socket=

# which databases to dump
# "all" to dump everything
# "include" to dump only those databases listed in mysql_dblist
# "exclude" to dump everything _except_ those DBs listed in mysql_dblist
# note that "all" may produce errors trying to dump the information_schema
# database, so you may need to use exclude and add that db to mysql_dblist
mysql_dbs="exclude"

# a list of databases, separated by mysql_dbdelim; see mysql_dbs for usage
# ignored if mysql_dbs="all"
mysql_dblist="information_schema"

# a character that is not in the name of ANY database on the MySQL server;
# MySQL does not currently allow / \ or . in database names, but this option
# is provided in case that changes
# if mysql_dblist is set, this must be used to separate the database names
# (this is how we deal with MySQL allowing practically any character in
# names; if mysql_dbs="all" or "exclude" and a database exists with this
# character in the name, the script will send an alert and stop)
# ignored if mysql_dbs="all" and mysql_splitdbs="no"
mysql_dbdelim='.'

# put each database in a separate file ("yes"), or put all of the dumped
# databases in one file ("no")?
# if "no", files will have the same names as the databases, plus a .sql
# extension (but see mysql_fileprefix)
mysql_splitdbs="yes"

# additional options to pass to the MySQL client (which must also
# support -BNe)
# ignored unless either mysql_dbs="all" and mysql_splitdbs="yes", or
# mysql_dbs="exclude"
# if connecting with SSL, add your SSL options here
# can be blank
mysql_clientoptions=

# options to pass to the mysqldump utility (which must also support:
#   -A if mysql_dbs="all" and mysql_splitdbs="no"
#   -B if mysql_dbs is not "all" and mysql_splitdbs="no")
# if connecting with SSL, add your SSL options here
# usually "--opt -Q", but other (potentially) useful options include:
#   "-R": include procedures and functions
#   "-c": include column names in INSERTs
#   "--master-data": include replication info
#   "--skip-extended-insert": one INSERT per row, especially useful when
#                             working with grant tables
# can be blank
mysql_dumpoptions="--opt -Q -R"

# path to a directory that will contain the dumps
# (this is NOT the subdirectory used if mysql_layout is a "dir" option;
# it is the parent directory of that subdirectory)
mysql_dumpdir="."

# the file layout to use for the dumps
# "single": store files in mysql_dumpdir, with no rotation
# "number": store numbered files in mysql_dumpdir
#           (lower number = more recent, most recent has no number)
# "date": store date-suffixed files in mysql_dumpdir (see mysql_filedate)
# "singledir": store files in an unrotated subdirectory of mysql_dumpdir
# "numberdir": store files in numbered subdirectories of mysql_dumpdir
# "datedir": store files in date-suffixed subdirectories of mysql_dumpdir
#            (see mysql_subdirdate)
# in the case of the "numberdir" and "datedir" options, the subdirectory
#   will be labeled with a number or date, but the files will not
mysql_layout="single"

# subdirectory names, if relevant, are constructed as follows:
# -= if mysql_layout="number", the current subdirectory will be named
#      [subdirprefix]
# -= in all other cases, subdirectories will be named
#      [subdirprefix][filedirsep][number/date]

# dumpfile names are constructed as follows (dbname will be omitted if
#   mysql_splitdbs="no"):
# -= if mysql_layout="single" or a "dir" option, the files will be named
#      [fileprefix][dbname][filesuffix]
# -= this will also be the case for the current file if
#      mysql_layout="number"
# -= if mysql_layout="number" or "date", the files will be named
#      [fileprefix][dbname][filedirsep][number/date][filesuffix]
#      except as noted above
#
# e.g. if mysql_layout="number", mysql_fileprefix="mydbs-",
# mysql_filedirsep=".", and mysql_suffix=".sql", you could have a file
# named "mydbs-bigdb.3.sql", which would be the 4th oldest copy (including
# the current one) of a database named 'bigdb'


# prefix to prepend to the names of the database dumpfiles, or the entire
# name if mysql_splitdbs="no" (not including suffixes)
# can be blank if mysql_splitdbs="yes"
# for example, if mysql_fileprefix="allmydbs", mysql_splitdbs="no",
#   mysql_layout="number", and mysql_filesep="-", the files will be named
#   like "allmydbs-1.sql";
# if mysql_fileprefix="mydbs-", mysql_splitdbs="yes", mysql_layout="number",
#   and mysql_filesep=".", the files will be named like "mydbs-dbname.1.sql"
mysql_fileprefix=

# name of the subdirectories to use if mysql_layout is a "dir" option;
# will have number or date suffixes added if mysql_layout is not "singledir"
# can be blank if mysql_layout="singledir" or "numberdir"
# see also mysql_subdirsep
# ignored if mysql_layout is not a "dir" option
mysql_subdirprefix=

# separator to use before number/date suffixes in dumpfile names (if
# mysql_layout="number" or "date") or subdirectory names (if
# mysql_layout="numberdir" or "datedir")
# can be more than one character, or blank
# ignored if mysql_layout="single" or "singledir", or if
# mysql_layout="datedir" and mysql_subdirprefix is blank
mysql_filedirsep="."

# format string for the 'date' utility, for dumpfile names (if
# mysql_layout="date") or subdirectory names (if mysql_layout="datedir")
# can be blank, but that's not recommended because it introduces spaces
# and other punctuation; better is something like "+%Y%m%d"
# (or "+%Y%m%d%H" if backups are run more than once a day); your 'date'
# must support whatever string you use
# dates refer to when the script starts; all files created during a given
# run of the script will have the same date suffix
# (or as close as possible; 'date' has to be run separately for e.g.
# backup logs and MySQL dumps)
# ignored if mysql_layout is not "date" or "datedir"
mysql_filedirdate="+%Y%m%d"

# number of dumps to keep, including the current one
# set to "0" for an unlimited number of dumps
# only applies if mysql_layout is not "single" or "singledir" (note: _does_
# apply for both "number"/"numberdir" and "date"/"datedir"
# note that mysql_daysfiles will also be applied
mysql_numfiles="5"

# days worth of dumps to keep, including the current one (0=unlimited)
# dumps older than this many days are removed, first rounding _down_
# to the nearest day
# only applies if mysql_layout is not "single" or "singledir" (note: _does_
# apply for both "number"/"numberdir" and "date"/"datedir"
# note that mysql_numfiles will also be applied
mysql_daysfiles="0"

# what kind of compression to use: "none", "gzip", or "bzip2"
# for "gzip" and "bzip2", each file will be zipped in place
# if blank, defaults to "none"
mysql_zipmode=

# additional options to pass to the zip utility
# for GNU gzip, "--rsyncable" is useful; other options include "-1" through
# "-9" to tune the size of the file vs. the amount of CPU resources required
# to zip it
# any individual options containing spaces must be enclosed in \"
# can be blank; ignored if mysql_zipmode="none"
mysql_zipoptions=
